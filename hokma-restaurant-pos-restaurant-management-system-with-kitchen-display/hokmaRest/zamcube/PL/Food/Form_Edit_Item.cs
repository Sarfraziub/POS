using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Media;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ezziresto.PL.Food
{
    public partial class Form_Edit_Item : DevExpress.XtraEditors.XtraForm
    {
        BL.FoodItem.FoodItem food_item = new BL.FoodItem.FoodItem();
        Form_Food_Items_List form_food_items_list = null;
        DataTable dt = new DataTable();
        int food_item_id = 0;

        public Form_Edit_Item()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceProperty.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceVariants.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource
            sqlDataSourceFoodGroup.Fill();
        }

        public void loadData()
        {
            DataTable _tb = food_item.get_food_item(this.food_item_id);

            if (_tb.Rows.Count > 0)
            {
                txtName.Text = _tb.Rows[0]["name"].ToString();
                foodGroup.EditValue = _tb.Rows[0]["food_group_id"];
                txtPrice.Text = _tb.Rows[0]["price"].ToString();
                pictureFoodItem.EditValue = _tb.Rows[0]["image"];
                hasProperties.EditValue = _tb.Rows[0]["has_property"];
                tokenProperty.EditValue = _tb.Rows[0]["property_group_ids"];
                hasVariants.EditValue = _tb.Rows[0]["has_variation"];
                isSpecial.EditValue = _tb.Rows[0]["is_special"];
                txtBarCode.Text = _tb.Rows[0]["barcode"].ToString();

                string variations_ids = "";

                DataTable variations = food_item.get_food_variations_by_id(this.food_item_id);

                for (int i = 0; i < variations.Rows.Count; i++)
                {
                    DataRow NewRow = dt.NewRow();
                    NewRow[0] = variations.Rows[i]["id"].ToString();
                    NewRow[1] = variations.Rows[i]["name"].ToString();
                    NewRow[2] = variations.Rows[i]["price"].ToString();
                    dt.Rows.Add(NewRow);

                    variations_ids += variations.Rows[i]["id"].ToString() + ",";
                }

                if(variations_ids.Length > 0)
                    variations_ids = variations_ids.Substring(0, variations_ids.Length - 1);

                gridControlAddedVariants.DataSource = dt;
            }
        }

        public void setObject(Form_Food_Items_List form_food_items_list)
        {
            this.form_food_items_list = form_food_items_list;
        }

        public void setID(int food_item_id)
        {
            this.food_item_id = food_item_id;
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            if (dxValidationProvider1.Validate())
            {
                byte[] bytes;

                MemoryStream stream = new MemoryStream();
                pictureFoodItem.Image.Save(stream, ImageFormat.Jpeg);
                bytes = stream.ToArray();

                int food_id = food_item.update_food_item(this.food_item_id, Convert.ToInt32(foodGroup.EditValue), txtName.Text, Convert.ToDecimal(txtPrice.Text), bytes,txtBarCode.Text, hasProperties.EditValue.ToString(), tokenProperty.EditValue.ToString(), hasVariants.EditValue.ToString(), isSpecial.EditValue.ToString(), txtName.Text, DateTime.Now);

                for (int i = 0; i < gridViewAddedVariants.RowCount; i++)
                {
                    food_item.add_food_with_variations(food_id, Convert.ToInt32(gridViewAddedVariants.GetRowCellValue(i, "id")), Convert.ToDecimal(gridViewAddedVariants.GetRowCellValue(i, "price")), DateTime.Now, DateTime.Now);
                }

                if (this.form_food_items_list != null)
                    this.form_food_items_list.asyncData();

                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                    simpleSound.Play();
                }
            }
            else
            {
                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer simpleSound = new SoundPlayer(@"c:\ValidationError.wav");
                    simpleSound.Play();
                }
            }
        }

        private void btnSaveExit_Click(object sender, EventArgs e)
        {

        }

        private void Form_Edit_Item_Load(object sender, EventArgs e)
        {
            hasProperties.EditValue = false;
            tokenProperty.EditValue = "";
            hasVariants.EditValue = false;
            isSpecial.EditValue = false;

            if (dt.Columns.Count == 0)
            {
                dt.Columns.Add("id", typeof(string));
                dt.Columns.Add("name", typeof(string));
                dt.Columns.Add("price", typeof(string));
            }

            loadData();
        }

        public bool exists(string value)
        {
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                if (dt.Rows[i][1].ToString() == value)
                    return true;
            }
            return false;
        }

        public int getIndex(string value)
        {
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                if (dt.Rows[i][1].ToString() == value)
                    return i;
            }
            return -1;
        }

        private void tokenVariante_Properties_TokenAdded(object sender, TokenEditTokenAddedEventArgs e)
        {
            if (!this.exists(e.Token.ToString()))
            {
                DataRow NewRow = dt.NewRow();
                NewRow[0] = tokenVariante.EditValue.ToString().Split(',').Last();
                NewRow[1] = e.Token.ToString();
                NewRow[2] = 0;
                dt.Rows.Add(NewRow);
                gridControlAddedVariants.DataSource = dt;
            }
            else
            {
                MessageBox.Show("Variante déja existé !!!");
            }
        }

        private void tokenVariante_Properties_TokenRemoved(object sender, TokenEditTokenRemovedEventArgs e)
        {
            int index = this.getIndex(e.Token.ToString());
            if (index != -1)
            {
                DataRow dr = dt.Rows[index];
                dr.Delete();
                dt.AcceptChanges();
                gridControlAddedVariants.DataSource = null;
                gridControlAddedVariants.DataSource = dt;
            }
        }

        private void tokenEdit2_Properties_TokenClick(object sender, TokenEditTokenClickEventArgs e)
        {

        }

        private void txtName1_EditValueChanged(object sender, EventArgs e)
        {

        }
    }
}