using DevExpress.Data;
using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Media;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ezziresto.PL.WorkPeriods
{
    public partial class Form_Work_Periods : DevExpress.XtraEditors.XtraForm
    {
        BL.WorkPeriods.WorkPeriods work_periods = new BL.WorkPeriods.WorkPeriods();
        public Form_Work_Periods()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceBranch.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceWorkPeriods.FillAsync();
        }

        private void btnStartPeriodWork_Click(object sender, EventArgs e)
        {
            if (dxValidationProvider1.Validate())
            {
                work_periods.add_work_periods(DateTime.Now, txtBranch.Text.ToString(), Properties.Settings.Default.userName, DateTime.Now, DateTime.Now, "",Convert.ToInt32(txtBranch.EditValue), DateTime.Now, DateTime.Now);

                sqlDataSourceWorkPeriods.FillAsync();

                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                    simpleSound.Play();
                }
            }
            else
            {
                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer simpleSound = new SoundPlayer(@"c:\ValidationError.wav");
                    simpleSound.Play();
                }
            }
        }

        private void repositoryItemButtonEditEndPeriod_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            DialogResult dialogResult = MessageBox.Show("Are You Sure,You Whant End This Item ?", "End This Item", MessageBoxButtons.YesNo);
            if (dialogResult == DialogResult.Yes)
            {
                object value = this.gridViewWorkPeriods.GetRowCellValue(this.gridViewWorkPeriods.FocusedRowHandle, "id");
                work_periods.end_work_periods(Convert.ToInt32(value),DateTime.Now, Properties.Settings.Default.userName, DateTime.Now);
                sqlDataSourceWorkPeriods.FillAsync();
            }
            else if (dialogResult == DialogResult.No)
            {
                // do something
            }
        }

        private void btnRefresh_Click(object sender, EventArgs e)
        {

        }

        private void Form_Work_Periods_Load(object sender, EventArgs e)
        {

        }

        private void textPeriodeDate_EditValueChanged(object sender, EventArgs e)
        {
            if (textPeriodeDate.EditValue.ToString() == "All")
            {
                gridViewWorkPeriods.ActiveFilterString = null;
            }
            else if (textPeriodeDate.EditValue.ToString() == "To Day")
            {
                gridViewWorkPeriods.ActiveFilterString = string.Format("IsOutlookIntervalToday([created_at])");
            }
            else if (textPeriodeDate.EditValue.ToString() == "This Week")
            {
                gridViewWorkPeriods.ActiveFilterString = string.Format("IsThisWeek([created_at])");
            }
            else if (textPeriodeDate.EditValue.ToString() == "Last Week")
            {
                gridViewWorkPeriods.ActiveFilterString = string.Format("IsOutlookIntervalLastWeek([created_at])");
            }
            else if (textPeriodeDate.EditValue.ToString() == "Newest")
            {
                gridViewWorkPeriods.Columns["id"].SortOrder = ColumnSortOrder.Ascending;
            }
            else if (textPeriodeDate.EditValue.ToString() == "Oldest")
            {
                gridViewWorkPeriods.Columns["id"].SortOrder = ColumnSortOrder.Descending;
            }
            else if (textPeriodeDate.EditValue.ToString() == "Between the dates")
            {
                startDate.Enabled = true;
                endDate.Enabled = true;
                gridViewWorkPeriods.ActiveFilterString = string.Format("[created_at] Between(#" + startDate.DateTime + "#, #" + endDate.DateTime + "#)");
            }
        }
    }
}