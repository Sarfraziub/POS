using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Media;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraGrid;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraGrid.Columns;
using System.Data.SqlClient;
using DevExpress.XtraEditors.Repository;
using DevExpress.Utils;

namespace ezziresto.PL.Pos
{
    public partial class Form_Pos : DevExpress.XtraEditors.XtraForm
    {
        BL.FoodPurchase.FoodPurchase food_purchase = new BL.FoodPurchase.FoodPurchase();
        BL.Pos.Pos pos = new BL.Pos.Pos();
        BL.TempOrder.TempOrder tempOrder = new BL.TempOrder.TempOrder();
        DataTable dt = new DataTable();
        DataTable pause_dt = new DataTable();
        private DataTable dataTable = new DataTable();
        List<(int item, GridControl GridClVariants, GroupControl GroupClVariants)> list = new List<(int item, GridControl GridClVariants, GroupControl GroupClVariants)>();
        List<(int item, GridControl gridControlPropertiesDynamic, GroupControl groupControlPropertiesDynamic)> list_properties = new List<(int item, GridControl gridControlPropertiesDynamic, GroupControl groupControlPropertiesDynamic)>();
        GridControl gridControlVariantsDynamic = new GridControl();
        GroupControl groupControlVariantsDynamic = new GroupControl();
        GridControl gridControlPropertiesDynamic = new GridControl();
        GroupControl groupControlPropertiesDynamic = new GroupControl();
        int restaurant_id = Properties.Settings.Default.restaurantId;
        int work_period_id = Properties.Settings.Default.restaurantId;
        int user_id = Properties.Settings.Default.userID;
        int branch_id = Properties.Settings.Default.branchId;
        int dept_tag_id = Properties.Settings.Default.deptTagId;
        string user_name = Properties.Settings.Default.userName;
        string branch_name = Properties.Settings.Default.branchName;
        string ref_text = "Ref0000"; 
        string ref_amount = "1000";
        string dept_tag_name = Properties.Settings.Default.deptTagName;
        string token = Properties.Settings.Default.deptTagName;
        string order_bill = "0000";
        string vat = Properties.Settings.Default.vat;
        string vat_system = Properties.Settings.Default.vatSystem;
        string cgst = Properties.Settings.Default.cgst;
        string sgst = Properties.Settings.Default.sgst;
        string total_payable = "0000";
        string bill_distribution = "0000";
        string paid_amount = "0000";
        string return_amount = "0000";
        int service_charge = 0;
        int discount = 0;
        int dept_commission = 0;
        int is_paid = 0;
        int is_accepted = 0;
        int is_cancelled = 0;
        int is_settled = 0;
        int is_ready = 0;
        int is_delivered = 0;
        int is_cooking = 0;
        string food_group = "Food group";
        string variation = "Variation";
        string properties = "Properties";
        string department_tags = "Department Tags";
        decimal sc = 0;
        decimal dc = 0;
        decimal dcgst = 0;
        decimal net_total_price = 0;
        decimal sgstResult = 0;
        decimal cgstResult = 0;
        decimal discountResult = 0;
        decimal serviceChargeResult = 0;
        
        public Form_Pos()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the ExcelDataSource asynchronously

            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceFoodGroup.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceFoodItems.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceClient.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceAddClients.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceTables.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceWaiters.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceSearchFoodItems.FillAsync();
        }

        private void Form_Pos_Load(object sender, EventArgs e)
        {
            //tempOrder.delete();

            totalPriceCurency.Text = Properties.Settings.Default.currency;

            timerPos.Start();

            if (dt.Columns.Count == 0)
            {
                dt.Columns.Add("designation", typeof(string));
                dt.Columns.Add("price", typeof(string));
                dt.Columns.Add("qty", typeof(int));
                dt.Columns.Add("total", typeof(string));
                dt.Columns.Add("delete", typeof(string));
                dt.Columns.Add("id", typeof(string));
            }
        }

        public int getIndex(string value)
        {
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                if (dt.Rows[i][0].ToString() == value)
                    return i;
            }
            return -1;
        }

        public void getTotalPrice()
        {
            Decimal total = 0;
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                total += Convert.ToInt32(dt.Rows[i]["qty"]) * Convert.ToDecimal(dt.Rows[i]["price"]);
            }
            alertTotalPrice.Text = total.ToString("#.##");
            txtSubTotal.Text = total.ToString("#.##");
        }

        private void gridControlFoodGroup_Click(object sender, EventArgs e)
        {
            object value = this.tileViewFoodGroup.GetRowCellValue(this.tileViewFoodGroup.FocusedRowHandle, "id");
            gridControlFoodItems.DataSource = pos.get_food_item_by_group_id(Convert.ToInt32(value));
        }

        public void generateTables(string title)
        {
                GridView gridVVars = new GridView();
                GridColumn grColPrix = new GridColumn();
                GridColumn grColName = new GridColumn();
                GridColumn grchoix = new GridColumn();
                RepositoryItemCalcEdit repCalcEdit1 = new RepositoryItemCalcEdit();
                RepositoryItemCheckEdit checkbtn = new RepositoryItemCheckEdit();

                SerializableAppearanceObject serializableAppearanceObj = new SerializableAppearanceObject();

                groupControlPropertiesDynamic.Appearance.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(246)))), ((int)(((byte)(78)))), ((int)(((byte)(96)))));
                groupControlPropertiesDynamic.Appearance.Options.UseBorderColor = true;
                groupControlPropertiesDynamic.AppearanceCaption.Font = new System.Drawing.Font("Tahoma", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                groupControlPropertiesDynamic.AppearanceCaption.Options.UseFont = true;
                groupControlPropertiesDynamic.AppearanceCaption.Options.UseTextOptions = true;
                groupControlPropertiesDynamic.AppearanceCaption.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center;
                groupControlPropertiesDynamic.Dock = System.Windows.Forms.DockStyle.Top;
                groupControlPropertiesDynamic.Location = new System.Drawing.Point(0, 0);
                groupControlPropertiesDynamic.MinimumSize = new System.Drawing.Size(0, 250);
                groupControlPropertiesDynamic.Name = "groupControlVari";
                groupControlPropertiesDynamic.Size = new System.Drawing.Size(582, 100);
                groupControlPropertiesDynamic.TabIndex = 1;
                groupControlPropertiesDynamic.Text = title;
                groupControlPropertiesDynamic.Controls.Add(gridControlPropertiesDynamic);

                // gridColumnName
                grColName.Caption = "Nom";
                grColName.FieldName = "Nom";
                grColName.Name = "gridColumnName";
                grColName.Visible = true;
                grColName.VisibleIndex = 1;

                // repositoryItemCalcEdit
                repCalcEdit1.Appearance.Font = new Font("Tahoma", 8F, FontStyle.Bold, GraphicsUnit.Point, ((byte)(0)));
                repCalcEdit1.Appearance.Options.UseFont = true;
                repCalcEdit1.AutoHeight = false;
                repCalcEdit1.BorderStyle = BorderStyles.NoBorder;
                repCalcEdit1.Name = "repositoryCalcEdit";
                repCalcEdit1.PopupBorderStyle = PopupBorderStyles.NoBorder;
                repCalcEdit1.TextEditStyle = TextEditStyles.DisableTextEditor;
                serializableAppearanceObj.Font = new System.Drawing.Font("Tahoma", 12F, FontStyle.Regular, GraphicsUnit.Point, ((byte)(0)));
                serializableAppearanceObj.Options.UseFont = true;

                // repositoryItemCheckEdit
                checkbtn.AutoHeight = false;
                checkbtn.Name = "repositoryItemCheckEdit";

                //checkbtn.ValueChecked = false;
                checkbtn.CheckBoxOptions.Style = CheckBoxStyle.SvgCheckBox1;

                // gridColumnPrix
                grColPrix.ColumnEdit = repCalcEdit1;
                grColPrix.AppearanceCell.Options.UseTextOptions = true;
                grColPrix.AppearanceCell.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center;
                grColPrix.AppearanceHeader.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(128)))), ((int)(((byte)(0)))));
                grColPrix.AppearanceHeader.Options.UseBackColor = true;
                grColPrix.AppearanceHeader.Options.UseTextOptions = true;
                grColPrix.AppearanceHeader.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center;
                grColPrix.Caption = "Prix";
                grColPrix.FieldName = "Prix";
                grColPrix.Name = "gridColumnPrice";
                grColPrix.Visible = true;
                grColPrix.VisibleIndex = 2;

                // grchoix
                grchoix.Caption = "choix";
                grchoix.ColumnEdit = checkbtn;
                grchoix.Name = "choi";
                grchoix.Visible = true;
                grchoix.VisibleIndex = 0;
                grchoix.Width = 30;

                // Grid View Styling 
                gridVVars.Appearance.HeaderPanel.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold);
                gridVVars.Appearance.HeaderPanel.Options.UseFont = true;
                gridVVars.Appearance.Row.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold);
                gridVVars.Appearance.Row.Options.UseFont = true;
                gridVVars.Columns.AddRange(new GridColumn[] { grchoix, grColName, grColPrix });
                gridVVars.GridControl = gridControlPropertiesDynamic;
                gridVVars.Name = "gridViewVars";
                gridVVars.OptionsView.ShowGroupPanel = false;
                gridVVars.OptionsView.ShowIndicator = false;
                // gridVVars.OptionsFind.AlwaysVisible = true;
                gridVVars.OptionsFind.FindDelay = 200;

                // Grid Control Styling 
                gridControlPropertiesDynamic.Dock = System.Windows.Forms.DockStyle.Fill;
                gridControlPropertiesDynamic.Location = new System.Drawing.Point(2, 29);
                gridControlPropertiesDynamic.MainView = gridVVars;
                gridControlPropertiesDynamic.Name = "gridControlVars";
                gridControlPropertiesDynamic.Size = new System.Drawing.Size(450, 166);
                gridControlPropertiesDynamic.TabIndex = 0;
                gridControlPropertiesDynamic.ViewCollection.AddRange(new DevExpress.XtraGrid.Views.Base.BaseView[] { gridVVars });

                //gridCVars.RepositoryItems.AddRange(new RepositoryItem[] {  checkbtn });
                groupControlPropertiesDynamic.Controls.Add(gridControlPropertiesDynamic);
                gridControlPropertiesDynamic.DataSource = dataTable;
                xtraScrollableControl.Controls.Add(groupControlPropertiesDynamic);
        }

        public void generateVariantsTable(int food_item_id)
        {
            GridView gridVVars = new GridView();
            GridColumn grColPrix = new GridColumn();
            GridColumn grColName = new GridColumn();
            GridColumn grchoix = new GridColumn();
            RepositoryItemCalcEdit repCalcEdit1 = new RepositoryItemCalcEdit();
            RepositoryItemCheckEdit checkbtn = new RepositoryItemCheckEdit();

            SerializableAppearanceObject serializableAppearanceObj = new SerializableAppearanceObject();

            groupControlVariantsDynamic.Appearance.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(246)))), ((int)(((byte)(78)))), ((int)(((byte)(96)))));
            groupControlVariantsDynamic.Appearance.Options.UseBorderColor = true;
            groupControlVariantsDynamic.AppearanceCaption.Font = new System.Drawing.Font("Tahoma", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            groupControlVariantsDynamic.AppearanceCaption.Options.UseFont = true;
            groupControlVariantsDynamic.AppearanceCaption.Options.UseTextOptions = true;
            groupControlVariantsDynamic.AppearanceCaption.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center;
            groupControlVariantsDynamic.Dock = System.Windows.Forms.DockStyle.Top;
            groupControlVariantsDynamic.Location = new System.Drawing.Point(0, 0);
            groupControlVariantsDynamic.MinimumSize = new System.Drawing.Size(0, 250);
            groupControlVariantsDynamic.Name = "groupControlVari";
            groupControlVariantsDynamic.Size = new System.Drawing.Size(582, 100);
            groupControlVariantsDynamic.TabIndex = 1;
            groupControlVariantsDynamic.Text = "Variants";
            groupControlVariantsDynamic.Controls.Add(gridControlVariantsDynamic);

            // gridColumnName
            grColName.Caption = "Nom";
            grColName.FieldName = "name";
            grColName.Name = "name";
            grColName.Visible = true;
            grColName.VisibleIndex = 1;

            // repositoryItemCalcEdit
            repCalcEdit1.Appearance.Font = new Font("Tahoma", 8F, FontStyle.Bold, GraphicsUnit.Point, ((byte)(0)));
            repCalcEdit1.Appearance.Options.UseFont = true;
            repCalcEdit1.AutoHeight = false;
            repCalcEdit1.BorderStyle = BorderStyles.NoBorder;
            repCalcEdit1.Name = "repositoryCalcEdit";
            repCalcEdit1.PopupBorderStyle = PopupBorderStyles.NoBorder;
            repCalcEdit1.TextEditStyle = TextEditStyles.DisableTextEditor;
            serializableAppearanceObj.Font = new System.Drawing.Font("Tahoma", 12F, FontStyle.Regular, GraphicsUnit.Point, ((byte)(0)));
            serializableAppearanceObj.Options.UseFont = true;

            // repositoryItemCheckEdit
            checkbtn.AutoHeight = false;
            checkbtn.Name = "repositoryItemCheckEdit";

            //checkbtn.ValueChecked = false;
            checkbtn.CheckBoxOptions.Style = CheckBoxStyle.SvgCheckBox1;

            // gridColumnPrix
            grColPrix.ColumnEdit = repCalcEdit1;
            grColPrix.AppearanceCell.Options.UseTextOptions = true;
            grColPrix.AppearanceCell.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center;
            grColPrix.AppearanceHeader.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(128)))), ((int)(((byte)(0)))));
            grColPrix.AppearanceHeader.Options.UseBackColor = true;
            grColPrix.AppearanceHeader.Options.UseTextOptions = true;
            grColPrix.AppearanceHeader.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center;
            grColPrix.Caption = "Prix";
            grColPrix.FieldName = "price";
            grColPrix.Name = "price";
            grColPrix.Visible = true;
            grColPrix.VisibleIndex = 2;

            // grchoix
            grchoix.Caption = "choix";
            grchoix.ColumnEdit = checkbtn;
            grchoix.Name = "choi";
            grchoix.Visible = true;
            grchoix.VisibleIndex = 0;
            grchoix.Width = 30;

            // Grid View Styling 
            gridVVars.Appearance.HeaderPanel.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold);
            gridVVars.Appearance.HeaderPanel.Options.UseFont = true;
            gridVVars.Appearance.Row.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold);
            gridVVars.Appearance.Row.Options.UseFont = true;
            gridVVars.Columns.AddRange(new GridColumn[] { grchoix, grColName, grColPrix });
            gridVVars.GridControl = gridControlVariantsDynamic;
            gridVVars.Name = "name";
            gridVVars.OptionsView.ShowGroupPanel = false;
            gridVVars.OptionsView.ShowIndicator = false;
            // gridVVars.OptionsFind.AlwaysVisible = true;
            gridVVars.OptionsFind.FindDelay = 200;

            // Grid Control Styling 
            gridControlVariantsDynamic.Dock = System.Windows.Forms.DockStyle.Fill;
            gridControlVariantsDynamic.Location = new System.Drawing.Point(2, 29);
            gridControlVariantsDynamic.MainView = gridVVars;
            gridControlVariantsDynamic.Name = "price";
            gridControlVariantsDynamic.Size = new System.Drawing.Size(450, 166);
            gridControlVariantsDynamic.TabIndex = 0;
            gridControlVariantsDynamic.ViewCollection.AddRange(new DevExpress.XtraGrid.Views.Base.BaseView[] { gridVVars });

            //gridCVars.RepositoryItems.AddRange(new RepositoryItem[] {  checkbtn });
            groupControlVariantsDynamic.Controls.Add(gridControlVariantsDynamic);
            gridControlVariantsDynamic.DataSource = pos.get_food_variations_by_id(food_item_id);
            xtraScrollableControl.Controls.Add(groupControlVariantsDynamic);
        }

        private void gridControlFoodItems_Click(object sender, EventArgs e)
        {
            object id = this.tileViewFoodItems.GetRowCellValue(this.tileViewFoodItems.FocusedRowHandle, "id");
            object name = this.tileViewFoodItems.GetRowCellValue(this.tileViewFoodItems.FocusedRowHandle, "name");
            object price = this.tileViewFoodItems.GetRowCellValue(this.tileViewFoodItems.FocusedRowHandle, "price");
            object property_group_ids = this.tileViewFoodItems.GetRowCellValue(this.tileViewFoodItems.FocusedRowHandle, "property_group_ids");

            //DataTable qty_dt = food_purchase.get_food_purchases_history_by_id(Convert.ToInt32(id));

            //if (qty_dt.Rows.Count > 0)
            //{
                int index = this.getIndex(name.ToString());

                DataTable properties = pos.get_food_properties_by_id(property_group_ids.ToString());

                if (index == -1)
                {
                    DataRow NewRow = dt.NewRow();
                    NewRow[0] = name.ToString();
                    NewRow[1] = price.ToString();
                    NewRow[2] = 1;
                    NewRow[3] = price.ToString();
                    NewRow[4] = "delete";
                    NewRow[5] = Convert.ToInt32(id);

                    this.getTotalPrice();
                    dt.Rows.Add(NewRow);
                    gridControlItemOrder.DataSource = dt;

                    if (list_properties.Count != 0)
                    {
                        list_properties[list.Count - 1].gridControlPropertiesDynamic.Visible = false;
                        list_properties[list.Count - 1].groupControlPropertiesDynamic.Visible = false;
                    }

                    for (int i = 0; i < properties.Rows.Count; i++)
                    {
                        gridControlPropertiesDynamic = new GridControl();
                        groupControlPropertiesDynamic = new GroupControl();
                        this.generateTables(properties.Rows[i]["name"].ToString());
                        list_properties.Add((Convert.ToInt32(properties.Rows[i]["id"]), gridControlPropertiesDynamic, groupControlPropertiesDynamic));
                    }

                    if (list.Count != 0)
                    {
                        list[list.Count - 1].GridClVariants.Visible = false;
                        list[list.Count - 1].GroupClVariants.Visible = false;
                    }

                    gridControlVariantsDynamic = new GridControl();
                    groupControlVariantsDynamic = new GroupControl();
                    this.generateVariantsTable(Convert.ToInt32(id));
                    list.Add((Convert.ToInt32(id), gridControlVariantsDynamic, groupControlVariantsDynamic));
                }
                else
                {
                    //DataRow dr = dt.Rows[index];
                    int qty = Convert.ToInt32(dt.Rows[index]["qty"]) + 1;
                    Decimal total = qty * Convert.ToDecimal(dt.Rows[index]["price"]);
                    dt.Rows[index].SetField("qty", qty);
                    dt.Rows[index].SetField("total", total);
                    this.getTotalPrice();
                    dt.AcceptChanges();
                    gridControlItemOrder.DataSource = null;
                    gridControlItemOrder.DataSource = dt;

                    for (int i = 0; i < list.Count; i++)
                    {
                        if (list[i].item == Convert.ToInt32(id))
                        {
                            list[i].GridClVariants.Visible = true;
                            list[i].GroupClVariants.Visible = true;
                        }
                        else
                        {
                            list[i].GridClVariants.Visible = false;
                            list[i].GroupClVariants.Visible = false;
                        }
                    }

                    for (int i = 0; i < list_properties.Count; i++)
                    {
                        for (int j = 0; j < properties.Rows.Count; j++)
                        {
                            if (list_properties[i].item == Convert.ToInt32(properties.Rows[0]["id"]))
                            {
                                list_properties[i].gridControlPropertiesDynamic.Visible = true;
                                list_properties[i].groupControlPropertiesDynamic.Visible = true;
                            }
                            else
                            {
                                list_properties[i].gridControlPropertiesDynamic.Visible = false;
                                list_properties[i].groupControlPropertiesDynamic.Visible = false;
                            }
                        }
                    }
                }

                this.getTotalPrice();

                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                    simpleSound.Play();
                }
            //} else
            //{
            //    SoundPlayer simpleSound = new SoundPlayer(@"c:\ValidationError.wav");
            //    simpleSound.Play();
            //    MessageBox.Show("Out of stock !");
            //}

        }

        private void layoutControl1_Click(object sender, EventArgs e)
        {

        }

        private void layoutControl3_Click(object sender, EventArgs e)
        {

        }

        private void simpleButton2_Click(object sender, EventArgs e)
        {

        }

        private void button2_Click(object sender, EventArgs e)
        {

        }

        private void button3_Click(object sender, EventArgs e)
        {

        }

        private void button4_Click(object sender, EventArgs e)
        {

        }

        private void gridControl3_Click(object sender, EventArgs e)
        {

        }

        private void layoutControl4_Click(object sender, EventArgs e)
        {

        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            PL.Customer.Form_Custommer custommer = new PL.Customer.Form_Custommer();
            custommer.ShowDialog();
        }

        private void buttonEdit1_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void xtraScrollableControl1_Click(object sender, EventArgs e)
        {

        }

        private void groupControl1_Paint(object sender, PaintEventArgs e)
        {

        }

        private void Delete_Click(object sender, EventArgs e)
        {
            object value = this.SellingProductGridViewItemOrder.GetRowCellValue(this.SellingProductGridViewItemOrder.FocusedRowHandle, "designation");
            int index = this.getIndex(value.ToString());
            if (index != -1)
            {
                DataRow dr = dt.Rows[index];
                dr.Delete();
                dt.AcceptChanges();
                gridControlItemOrder.DataSource = null;
                gridControlItemOrder.DataSource = dt;
                this.getTotalPrice();

                this.calculeTotalPrice();

                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer simpleSound = new SoundPlayer(@"c:\Deleted.wav");
                    simpleSound.Play();
                }
            }
        }

        private void btnPaid_Click_1(object sender, EventArgs e)
        {
            tempOrder.delete();

            if (dt.Rows.Count > 0)
            {
                int customer_id = 0;
                string customer_name = "-";
                int table_id = 0;
                string table_name = "-";
                int waiter_id = 0;
                string waiter_name = "-";
                string totalClients = txtTotalClients.EditValue.ToString();

                if (txtWaiter.EditValue != null)
                {
                    waiter_id = Convert.ToInt32(txtWaiter.EditValue);
                    waiter_name = txtWaiter.Text;
                }

                if (txtTable.EditValue != null)
                {
                    table_id = Convert.ToInt32(txtTable.EditValue);
                    table_name = txtTable.Text;
                }

                if (txtCustomer.EditValue != null)
                {
                    customer_id = Convert.ToInt32(txtCustomer.EditValue);
                    customer_name = txtCustomer.Text;
                }

                this.getTotalPrice();

                paid_amount = alertTotalPrice.Text;

                int order_id = pos.add_order_groups(
                restaurant_id,// int restaurant_id,
                work_period_id,// int work_period_id,
                user_id,// int user_id,
                user_name,// string user_name,
                branch_id,// int branch_id,
                branch_name,// string branch_name,
                customer_id,// int customer_id,
                customer_name,// string customer_name,
                ref_text, // string ref_text,
                table_id, // int table_id,
                ref_amount,// string ref_amount,
                table_name,// string table_name,
                waiter_id,// int waiter_id,
                waiter_name,// string waiter_name,
                dept_tag_id,// int dept_tag_id,
                dept_tag_name,// string dept_tag_name,
                token,// string token,
                totalClients,// string total_guest,
                Convert.ToInt32(txtServiceCharge.Text),// int service_charge,
                Convert.ToInt32(txtDiscount.Text),// int discount,
                dept_commission,// int dept_commission,
                alertTotalPrice.Text,// string order_bill,
                vat,// string vat,
                vat_system,// string vat_system,
                txtCgst.Text,// string cgst,
                txtSgst.Text,// string sgst,
                total_payable,// string total_payable,
                alertTotalPrice.Text,// string bill_distribution,
                "0",// string paid_amount,
                return_amount,// string return_amount,
                is_paid,// int is_paid,
                is_accepted,// int is_accepted,
                is_cancelled,// int is_cancelled,
                is_settled,// int is_settled,
                is_ready,// int is_ready,
                is_delivered,// int is_delivered,
                DateTime.Now,
                DateTime.Now
                );

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    //MessageBox.Show(dt.Rows[i]["id"].ToString());

                    pos.add_order_items(
                        order_id,
                        Convert.ToInt32(dt.Rows[i]["id"]),//int food_item_id,
                        dt.Rows[i]["designation"].ToString(),// string food_item,
                        food_group,// string food_group,
                        variation,// string variation,
                        properties,// string properties,
                        Convert.ToInt32(dt.Rows[i]["qty"]),// int quantity,
                        dt.Rows[i]["price"].ToString(),// string price,
                        department_tags, // string department_tags,
                        is_cooking,// int is_cooking,
                        is_ready,// int is_ready,
                        DateTime.Now,
                        DateTime.Now
                    );

                    tempOrder.add_temp_order_items(
                        order_id,
                        Convert.ToInt32(dt.Rows[i]["id"]),//int food_item_id,
                        dt.Rows[i]["designation"].ToString(),// string food_item,
                        food_group,// string food_group,
                        variation,// string variation,
                        properties,// string properties,
                        Convert.ToInt32(dt.Rows[i]["qty"]),// int quantity,
                        dt.Rows[i]["price"].ToString(),// string price,
                        department_tags, // string department_tags,
                        is_cooking,// int is_cooking,
                        is_ready,// int is_ready,
                        DateTime.Now,
                        DateTime.Now
                    );
                }


                tempOrder.add_temp_order_groups(
                restaurant_id,// int restaurant_id,
                work_period_id,// int work_period_id,
                user_id,// int user_id,
                user_name,// string user_name,
                branch_id,// int branch_id,
                branch_name,// string branch_name,
                customer_id,// int customer_id,
                customer_name,// string customer_name,
                ref_text, // string ref_text,
                table_id, // int table_id,
                ref_amount,// string ref_amount,
                table_name,// string table_name,
                waiter_id,// int waiter_id,
                waiter_name,// string waiter_name,
                dept_tag_id,// int dept_tag_id,
                dept_tag_name,// string dept_tag_name,
                token,// string token,
                totalClients,// string total_guest,
                Convert.ToInt32(txtServiceCharge.Text),// int service_charge,
                Convert.ToInt32(txtDiscount.Text),// int discount,
                dept_commission,// int dept_commission,
                alertTotalPrice.Text,// string order_bill,
                vat,// string vat,
                vat_system,// string vat_system,
                txtCgst.Text,// string cgst,
                txtSgst.Text,// string sgst,
                total_payable,// string total_payable,
                alertTotalPrice.Text,// string bill_distribution,
                "0",// string paid_amount,
                return_amount,// string return_amount,
                is_paid,// int is_paid,
                is_accepted,// int is_accepted,
                is_cancelled,// int is_cancelled,
                is_settled,// int is_settled,
                is_ready,// int is_ready,
                is_delivered,// int is_delivered,
                DateTime.Now, 
                DateTime.Now
                );

                decimal _total = Convert.ToDecimal(alertTotalPrice.Text);

                if (this.sc != 0)
                    _total = this.sc;

                if (this.dc != 0)
                    _total = this.dc;

                Order.OrderGroups.Form_Settle_Order order = new Order.OrderGroups.Form_Settle_Order();
                order.setOrderId(order_id);
                order.setDistTotalPrice(_total);
                order.ShowDialog();

                alertTotalPrice.Text = "00000";
                dt.Clear();

                //this.print();

                //tempOrder.delete();
            } else
            {
                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer simpleSound = new SoundPlayer(@"c:\ValidationError.wav");
                    simpleSound.Play();
                }
                MessageBox.Show("Il n'y a aucun article sélectionné !");
            }
        }

        public void print()
        {
            DocumentsViewer.Form_DocViewer frmDoc = new DocumentsViewer.Form_DocViewer();
            frmDoc.printReciept();
            frmDoc.ShowDialog();
        }

        public void calculeTotalPrice()
        {
            decimal total_price = 0;

            for (int i = 0; i < dt.Rows.Count; i++)
            {
                total_price += Convert.ToDecimal(dt.Rows[i]["price"]) * Convert.ToDecimal(dt.Rows[i]["qty"]);
            }
            this.net_total_price = total_price;
            txtSubTotal.Text = total_price.ToString();
            alertTotalPrice.Text = total_price.ToString();
        }

        private void btnSubmitted_Click_1(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            PL.Order.OrderGroups.Form_Order_Groups form_order = new PL.Order.OrderGroups.Form_Order_Groups();
            form_order.setWhichOne("Submitted");
            form_order.setFromPos(true);
            form_order.ShowDialog();
        }

        private void btnSetteld_Click_1(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            PL.Order.OrderGroups.Form_Order_Groups form_order = new PL.Order.OrderGroups.Form_Order_Groups();
            form_order.setWhichOne("Settled");
            form_order.setFromPos(true);
            form_order.ShowDialog();
        }

        private void btnOnline_Click_1(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
        }

        private void btnAddCustomer_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            PL.Customer.Form_Custommer custommer = new PL.Customer.Form_Custommer();
            custommer.ShowDialog();
        }

        private void btnCancel_Click_1(object sender, EventArgs e)
        {
            alertTotalPrice.Text = "00000";
            dt.Clear();
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\ValidationError.wav");
                simpleSound.Play();
            }
        }

        private void btnKitchen_Click_1(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            Kitchen.Form_kitchen_List form_kitchen_list = new Kitchen.Form_kitchen_List();
            form_kitchen_list.ShowDialog();
        }

        private void btnAddTable_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            PL.Restaurant.Table.Form_Add_Table table = new PL.Restaurant.Table.Form_Add_Table();
            table.ShowDialog();
        }

        private void btnAddWaiter_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            PL.User.Waiter.Form_Waiter waiter = new PL.User.Waiter.Form_Waiter();
            waiter.ShowDialog();
        }

        private void btnFoods_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            PL.User.Waiter.Form_Waiter waiter = new PL.User.Waiter.Form_Waiter();
            waiter.ShowDialog();
        }

        private void btnCustommers_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            PL.Customer.Form_Customers customer = new PL.Customer.Form_Customers();
            customer.ShowDialog();
        }

        private void btnCredit_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            PL.Credit.Form_Credit credit = new PL.Credit.Form_Credit();
            credit.ShowDialog();
        }

        private void btnWorkPeriods_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            PL.WorkPeriods.Form_Work_Periods work_periods = new PL.WorkPeriods.Form_Work_Periods();
            work_periods.ShowDialog();
        }

        private void btnAddProduct_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            PL.Food.Form_Add_New_Item food = new PL.Food.Form_Add_New_Item();
            food.ShowDialog();
        }

        private void btnValider_Click(object sender, EventArgs e)
        {
            DialogResult dialogResult = MessageBox.Show("Are You Sure,You Want Clear This Items ?", "Clear This Items", MessageBoxButtons.YesNo);
            if (dialogResult == DialogResult.Yes)
            {
                alertTotalPrice.Text = "00000";
                dt.Clear();
                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer simpleSound = new SoundPlayer(@"c:\ValidationError.wav");
                    simpleSound.Play();
                }
            }
        }

        private void btnPause_Click(object sender, EventArgs e)
        {
            if (this.pause_dt.Rows.Count == 0)
            {
                DialogResult dialogResult = MessageBox.Show("Are You Sure,You Want to hold This Items ?", "Hold This Items", MessageBoxButtons.YesNo);
                if (dialogResult == DialogResult.Yes)
                {
                    this.pause_dt = this.dt;
                    this.dt = new DataTable();

                    if (dt.Columns.Count == 0)
                    {
                        dt.Columns.Add("designation", typeof(string));
                        dt.Columns.Add("price", typeof(string));
                        dt.Columns.Add("qty", typeof(int));
                        dt.Columns.Add("total", typeof(string));
                        dt.Columns.Add("delete", typeof(string));
                        dt.Columns.Add("id", typeof(string));
                    }

                    gridControlItemOrder.DataSource = null;
                    alertTotalPrice.Text = "00000";
                    if (Properties.Settings.Default.sound == "yes")
                    {
                        SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                        simpleSound.Play();
                    }
                }
            }
            else
            {
                DialogResult dialogResult = MessageBox.Show("Are You Sure,You Want to Restore All Items ?", "Restore All Items", MessageBoxButtons.YesNo);
                if (dialogResult == DialogResult.Yes)
                {
                    this.dt = this.pause_dt;
                    this.pause_dt = new DataTable();
                    gridControlItemOrder.DataSource = dt;
                    this.getTotalPrice();
                    if (Properties.Settings.Default.sound == "yes")
                    {
                        SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                        simpleSound.Play();
                    }
                }
            }
        }

        private void btnPointsClient_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            Customer.Form_customer_points customer_points = new Customer.Form_customer_points();
            customer_points.setObject(this);
            customer_points.ShowDialog();
        }

        private void btnPrintBill_Click(object sender, EventArgs e)
        {
            if (dt.Rows.Count > 0)
            {
                int customer_id = 0;
                string customer_name = "-";
                int table_id = 0;
                string table_name = "-";
                int waiter_id = 0;
                string waiter_name = "-";
                string totalClients = txtTotalClients.EditValue.ToString();

                if (txtWaiter.EditValue != null)
                {
                    waiter_id = Convert.ToInt32(txtWaiter.EditValue);
                    waiter_name = txtWaiter.Text;
                }

                if (txtTable.EditValue != null)
                {
                    table_id = Convert.ToInt32(txtTable.EditValue);
                    table_name = txtTable.Text;
                }

                if (txtCustomer.EditValue != null)
                {
                    customer_id = Convert.ToInt32(txtCustomer.EditValue);
                    customer_name = txtCustomer.Text;
                }

                this.getTotalPrice();

                paid_amount = alertTotalPrice.Text;

                int order_id = tempOrder.add_temp_order_groups(
                                restaurant_id,// int restaurant_id,
                                work_period_id,// int work_period_id,
                                user_id,// int user_id,
                                user_name,// string user_name,
                                branch_id,// int branch_id,
                                branch_name,// string branch_name,
                                customer_id,// int customer_id,
                                customer_name,// string customer_name,
                                ref_text, // string ref_text,
                                table_id, // int table_id,
                                ref_amount,// string ref_amount,
                                table_name,// string table_name,
                                waiter_id,// int waiter_id,
                                waiter_name,// string waiter_name,
                                dept_tag_id,// int dept_tag_id,
                                dept_tag_name,// string dept_tag_name,
                                token,// string token,
                                totalClients,// string total_guest,
                                service_charge,// int service_charge,
                                discount,// int discount,
                                dept_commission,// int dept_commission,
                                order_bill,// string order_bill,
                                vat,// string vat,
                                vat_system,// string vat_system,
                                cgst,// string cgst,
                                sgst,// string sgst,
                                total_payable,// string total_payable,
                                bill_distribution,// string bill_distribution,
                                paid_amount,// string paid_amount,
                                return_amount,// string return_amount,
                                is_paid,// int is_paid,
                                is_accepted,// int is_accepted,
                                is_cancelled,// int is_cancelled,
                                is_settled,// int is_settled,
                                is_ready,// int is_ready,
                                is_delivered,// int is_delivered,
                                DateTime.Now,
                                DateTime.Now
                                );

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    //MessageBox.Show(dt.Rows[i]["id"].ToString());

                    tempOrder.add_temp_order_items(
                        order_id,
                        Convert.ToInt32(dt.Rows[i]["id"]),//int food_item_id,
                        dt.Rows[i]["designation"].ToString(),// string food_item,
                        food_group,// string food_group,
                        variation,// string variation,
                        properties,// string properties,
                        Convert.ToInt32(dt.Rows[i]["qty"]),// int quantity,
                        dt.Rows[i]["price"].ToString(),// string price,
                        department_tags, // string department_tags,
                        is_cooking,// int is_cooking,
                        is_ready,// int is_ready,
                        DateTime.Now,
                        DateTime.Now
                    );
                }

                this.print();

                tempOrder.delete();

                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                    simpleSound.Play();
                }
            }
            else
            {
                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer simpleSound = new SoundPlayer(@"c:\ValidationError.wav");
                    simpleSound.Play();
                }
                MessageBox.Show("Il n'y a aucun article sélectionné !");
            }
        }

        private void btnCalculator_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            System.Diagnostics.Process.Start("calc.exe"); 
        }

        private void gridViewSearchItem_RowClick(object sender, RowClickEventArgs e)
        {
            object id = this.gridViewSearchItem.GetRowCellValue(this.gridViewSearchItem.FocusedRowHandle, "id");
            object name = this.gridViewSearchItem.GetRowCellValue(this.gridViewSearchItem.FocusedRowHandle, "name");
            object price = this.gridViewSearchItem.GetRowCellValue(this.gridViewSearchItem.FocusedRowHandle, "price");
            object property_group_ids = this.gridViewSearchItem.GetRowCellValue(this.gridViewSearchItem.FocusedRowHandle, "property_group_ids");

            int index = this.getIndex(name.ToString());

            DataTable properties = pos.get_food_properties_by_id(property_group_ids.ToString());

            if (index == -1)
            {
                DataRow NewRow = dt.NewRow();
                NewRow[0] = name.ToString();
                NewRow[1] = price.ToString();
                NewRow[2] = 1;
                NewRow[3] = price.ToString();
                NewRow[4] = "delete";
                NewRow[5] = Convert.ToInt32(id);

                this.getTotalPrice();
                dt.Rows.Add(NewRow);
                gridControlItemOrder.DataSource = dt;

                if (list_properties.Count != 0)
                {
                    list_properties[list.Count - 1].gridControlPropertiesDynamic.Visible = false;
                    list_properties[list.Count - 1].groupControlPropertiesDynamic.Visible = false;
                }

                for (int i = 0; i < properties.Rows.Count; i++)
                {
                    gridControlPropertiesDynamic = new GridControl();
                    groupControlPropertiesDynamic = new GroupControl();
                    this.generateTables(properties.Rows[i]["name"].ToString());
                    list_properties.Add((Convert.ToInt32(properties.Rows[i]["id"]), gridControlPropertiesDynamic, groupControlPropertiesDynamic));
                }

                if (list.Count != 0)
                {
                    list[list.Count - 1].GridClVariants.Visible = false;
                    list[list.Count - 1].GroupClVariants.Visible = false;
                }

                gridControlVariantsDynamic = new GridControl();
                groupControlVariantsDynamic = new GroupControl();
                this.generateVariantsTable(Convert.ToInt32(id));
                list.Add((Convert.ToInt32(id), gridControlVariantsDynamic, groupControlVariantsDynamic));
            }
            else
            {
                int qty = Convert.ToInt32(dt.Rows[index]["qty"]) + 1;
                Decimal total = qty * Convert.ToDecimal(dt.Rows[index]["price"]);
                dt.Rows[index].SetField("qty", qty);
                dt.Rows[index].SetField("total", total);
                this.getTotalPrice();
                dt.AcceptChanges();
                gridControlItemOrder.DataSource = null;
                gridControlItemOrder.DataSource = dt;

                for (int i = 0; i < list.Count; i++)
                {
                    if (list[i].item == Convert.ToInt32(id))
                    {
                        list[i].GridClVariants.Visible = true;
                        list[i].GroupClVariants.Visible = true;
                    }
                    else
                    {
                        list[i].GridClVariants.Visible = false;
                        list[i].GroupClVariants.Visible = false;
                    }
                }

                for (int i = 0; i < list_properties.Count; i++)
                {
                    for (int j = 0; j < properties.Rows.Count; j++)
                    {
                        if (list_properties[i].item == Convert.ToInt32(properties.Rows[0]["id"]))
                        {
                            list_properties[i].gridControlPropertiesDynamic.Visible = true;
                            list_properties[i].groupControlPropertiesDynamic.Visible = true;
                        }
                        else
                        {
                            list_properties[i].gridControlPropertiesDynamic.Visible = false;
                            list_properties[i].groupControlPropertiesDynamic.Visible = false;
                        }
                    }
                }
            }

            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
        }

        private void timerPos_Tick(object sender, EventArgs e)
        {
            label_pos_timer.Text = DateTime.Now.ToString("hh:mm:ss tt");
        }

        private void btnKeyboard_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            System.Diagnostics.Process.Start("osk.exe");
        }

        private void btnDeliveryMan_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            User.DeliveryUser.Form_Delivery_Users_List delivery_list = new User.DeliveryUser.Form_Delivery_Users_List();
            delivery_list.ShowDialog();
        }

        private void btnZones_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            Restaurant.Zone.Form_Zones zones = new Restaurant.Zone.Form_Zones();
            zones.ShowDialog();
        }

        private void SellingProductGridViewItemOrder_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            this.calculeTotalPrice();
        }

        private void txtSgst_EditValueChanged(object sender, EventArgs e)
        {
            this.calculeTotalPrice();
            if (txtSgst.EditValue != null)
            {
                this.sgstResult = (this.net_total_price * Convert.ToDecimal(txtSgst.EditValue) / 100);
                alertTotalPrice.Text = (this.net_total_price + this.sgstResult + this.cgstResult + this.serviceChargeResult).ToString();
            }
        }

        private void txtCgst_EditValueChanged(object sender, EventArgs e)
        {
            this.calculeTotalPrice();
            if (txtCgst.EditValue != null)
            {
                this.cgstResult = (this.net_total_price * Convert.ToDecimal(txtCgst.EditValue) / 100);
                alertTotalPrice.Text = (this.net_total_price + this.cgstResult + this.sgstResult + this.serviceChargeResult).ToString();
            }
        }

        private void txtDiscount_EditValueChanged(object sender, EventArgs e)
        {
            this.calculeTotalPrice();
            if (txtCgst.EditValue != null)
            {
                this.net_total_price = this.net_total_price - (this.net_total_price * Convert.ToDecimal(txtDiscount.EditValue) / 100);
                alertTotalPrice.Text = (this.net_total_price + this.cgstResult + this.sgstResult + this.serviceChargeResult).ToString();
            }
        }

        private void txtServiceCharge_EditValueChanged(object sender, EventArgs e)
        {
            this.calculeTotalPrice();
            if (txtServiceCharge.EditValue != null)
            {
                this.serviceChargeResult = (this.net_total_price * Convert.ToDecimal(txtServiceCharge.EditValue) / 100);
                alertTotalPrice.Text = (this.net_total_price + this.cgstResult + this.sgstResult + this.serviceChargeResult).ToString();
            }
        }

		private void label1_Click(object sender, EventArgs e)
		{

		}
	}
}