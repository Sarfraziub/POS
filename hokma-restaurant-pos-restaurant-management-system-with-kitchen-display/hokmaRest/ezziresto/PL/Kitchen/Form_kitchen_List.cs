using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Media;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ezziresto.PL.Kitchen
{
    public partial class Form_kitchen_List : DevExpress.XtraEditors.XtraForm
    {
        BL.Order.Order order = new BL.Order.Order();
        DataTable dt = new DataTable();
        DataTable newOrders = new DataTable();
        DataTable orderAccepted = new DataTable();
        DataTable orderDelivred = new DataTable();
        DataTable orderTermined = new DataTable();

        public Form_kitchen_List()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceNewOrders.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceOrderAccepted.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceOrderTermined.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceOrderDelivred.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceOrders.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceBranchs.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceTables.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceCustommers.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceWaiters.FillAsync();
        }

        public void asyncNewOrders()
        {
            newOrders = order.get_new_orders();
            gridControlNewOrders.DataSource = newOrders;
        }

        public void asyncOrderAccepted()
        {
            orderAccepted = order.get_accepted_orders();
            gridControlOrderAccepted.DataSource = orderAccepted;
        }

        public void asyncOrderTermined()
        {
            orderTermined = order.get_termined_orders();
            gridControlOrderTermined.DataSource = orderTermined;
        }

        public void asyncOrderDelivred()
        {
            orderDelivred = order.get_delivred_orders();
            gridControlOrderDelivred.DataSource = orderDelivred;
        }

        private void Form_kitchen_List_Load(object sender, EventArgs e)
        {

        }

        private void txtBranchSearch_EditValueChanged(object sender, EventArgs e)
        {
            if(txtBranchSearch.EditValue != null)
            {
                newOrders = order.get_new_orders_by_branch_id(Convert.ToInt32(txtBranchSearch.EditValue.ToString()));
                orderAccepted = order.get_accepted_orders_by_branch_id(Convert.ToInt32(txtBranchSearch.EditValue.ToString()));
                orderDelivred = order.get_delivred_orders_by_branch_id(Convert.ToInt32(txtBranchSearch.EditValue.ToString()));
                orderTermined = order.get_termined_orders_by_branch_id(Convert.ToInt32(txtBranchSearch.EditValue.ToString()));
                gridControlNewOrders.DataSource = newOrders;
                gridControlOrderAccepted.DataSource = orderAccepted;
                gridControlOrderDelivred.DataSource = orderDelivred;
                gridControlOrderTermined.DataSource = orderTermined;
            }
        }

        private void txtOrderSearch_EditValueChanged(object sender, EventArgs e)
        {
            if (txtOrderSearch.EditValue != null)
            {
                newOrders = order.get_new_orders_by_id(Convert.ToInt32(txtOrderSearch.EditValue.ToString()));
                orderAccepted = order.get_accepted_orders_by_id(Convert.ToInt32(txtOrderSearch.EditValue.ToString()));
                orderDelivred = order.get_delivred_orders_by_id(Convert.ToInt32(txtOrderSearch.EditValue.ToString()));
                orderTermined = order.get_termined_orders_by_id(Convert.ToInt32(txtOrderSearch.EditValue.ToString()));
                gridControlNewOrders.DataSource = newOrders;
                gridControlOrderAccepted.DataSource = orderAccepted;
                gridControlOrderDelivred.DataSource = orderDelivred;
                gridControlOrderTermined.DataSource = orderTermined;
            }
        }

        private void btnRefresh_Click(object sender, EventArgs e)
        {
            refresh();
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Wrong.wav");
                simpleSound.Play();
            }
        }

        public void refresh()
        {
            newOrders = order.get_new_orders();
            orderAccepted = order.get_accepted_orders();
            orderDelivred = order.get_delivred_orders();
            orderTermined = order.get_termined_orders();
            gridControlNewOrders.DataSource = newOrders;
            gridControlOrderAccepted.DataSource = orderAccepted;
            gridControlOrderDelivred.DataSource = orderDelivred;
            gridControlOrderTermined.DataSource = orderTermined;
        }

        private void btnNewOrdersRefresh_Click(object sender, EventArgs e)
        {
            newOrders = order.get_new_orders();
            gridControlNewOrders.DataSource = newOrders;
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Sound.wav");
                simpleSound.Play();
            }
        }

        private void btnRefreshOrderAccepted_Click(object sender, EventArgs e)
        {
            orderAccepted = order.get_accepted_orders();
            gridControlOrderAccepted.DataSource = orderAccepted;
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Sound.wav");
                simpleSound.Play();
            }
        }

        private void btnRefreshOrderTermined_Click(object sender, EventArgs e)
        {
            orderTermined = order.get_termined_orders();
            gridControlOrderTermined.DataSource = orderTermined;
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Sound.wav");
                simpleSound.Play();
            }
        }

        private void btnRefreshOrderDelivred_Click(object sender, EventArgs e)
        {
            orderDelivred = order.get_delivred_orders();
            gridControlOrderDelivred.DataSource = orderDelivred;
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Sound.wav");
                simpleSound.Play();
            }
        }

        private void btnAcceptAllOrders_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }

            DialogResult dialogResult = MessageBox.Show("Sure", "Some Title", MessageBoxButtons.YesNo);
            if (dialogResult == DialogResult.Yes)
            {
                order.update_all_new_orders();
                refresh();
                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer finish = new SoundPlayer(@"c:\Wrong.wav");
                    finish.Play();
                }
            }
            else if (dialogResult == DialogResult.No)
            {
                //do something else
            }
        }

        private void btnTerminedAllOrders_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }

            DialogResult dialogResult = MessageBox.Show("Sure", "Some Title", MessageBoxButtons.YesNo);
            if (dialogResult == DialogResult.Yes)
            {
                order.update_all_accepted_orders();
                refresh();
                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer finish = new SoundPlayer(@"c:\Wrong.wav");
                    finish.Play();
                }
            }
            else if (dialogResult == DialogResult.No)
            {
                //do something else
            }
        }

        private void btnDelivredAllOrders_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }

            DialogResult dialogResult = MessageBox.Show("Sure", "Some Title", MessageBoxButtons.YesNo);
            if (dialogResult == DialogResult.Yes)
            {
                order.update_all_termined_orders();
                refresh();
                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer finish = new SoundPlayer(@"c:\Wrong.wav");
                    finish.Play();
                }
            }
            else if (dialogResult == DialogResult.No)
            {
                //do something else
            }
        }

        private void btnNonDelivredAllOrders_Click(object sender, EventArgs e)
        {
            SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
            simpleSound.Play();

            DialogResult dialogResult = MessageBox.Show("Sure", "Some Title", MessageBoxButtons.YesNo);
            if (dialogResult == DialogResult.Yes)
            {
                order.update_all_delivred_orders();
                refresh();
                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer finish = new SoundPlayer(@"c:\Wrong.wav");
                    finish.Play();
                }
            }
            else if (dialogResult == DialogResult.No)
            {
                //do something else
            }
        }

        private void btnTables_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            PL.Restaurant.Table.Form_Table_List table = new PL.Restaurant.Table.Form_Table_List();
            table.ShowDialog();
        }

        private void btnWaiter_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            PL.User.Waiter.Form_Waiters_List waiter = new PL.User.Waiter.Form_Waiters_List();
            waiter.ShowDialog();
        }

        private void btnCutommers_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            PL.Customer.Form_Customers customer = new PL.Customer.Form_Customers();
            customer.ShowDialog();
        }

        private void btnBranchs_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            PL.Restaurant.Branch.Form_Branch_List branch = new PL.Restaurant.Branch.Form_Branch_List();
            branch.ShowDialog();
        }

        private void btnOrders_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            PL.Order.OrderGroups.Form_Order_Groups Order = new PL.Order.OrderGroups.Form_Order_Groups();
            Order.ShowDialog();
        }

        private void btnAddTable_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            PL.Restaurant.Table.Form_Add_Table table = new PL.Restaurant.Table.Form_Add_Table();
            table.ShowDialog();
        }

        private void btnAddCustommer_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            PL.Customer.Form_Custommer customer = new PL.Customer.Form_Custommer();
            customer.ShowDialog();
        }

        private void btnAddBranch_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            PL.Restaurant.Branch.Form_Add_Branch branch = new PL.Restaurant.Branch.Form_Add_Branch();
            branch.ShowDialog();
        }

        private void btnAddWaiter_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            PL.User.Waiter.Form_Waiter waiter = new PL.User.Waiter.Form_Waiter();
            waiter.ShowDialog();
        }

        private void txtTableSearch_EditValueChanged(object sender, EventArgs e)
        {
            if (txtTableSearch.EditValue != null)
            {
                newOrders = order.get_new_orders_by_table_id(Convert.ToInt32(txtTableSearch.EditValue.ToString()));
                orderAccepted = order.get_accepted_orders_by_table_id(Convert.ToInt32(txtTableSearch.EditValue.ToString()));
                orderDelivred = order.get_delivred_orders_by_table_id(Convert.ToInt32(txtTableSearch.EditValue.ToString()));
                orderTermined = order.get_termined_orders_by_table_id(Convert.ToInt32(txtTableSearch.EditValue.ToString()));
                gridControlNewOrders.DataSource = newOrders;
                gridControlOrderAccepted.DataSource = orderAccepted;
                gridControlOrderDelivred.DataSource = orderDelivred;
                gridControlOrderTermined.DataSource = orderTermined;
            }
        }

        private void txtWaiterSearch_EditValueChanged(object sender, EventArgs e)
        {
            if (txtWaiterSearch.EditValue != null)
            {
                newOrders = order.get_new_orders_by_waiter_id(Convert.ToInt32(txtWaiterSearch.EditValue.ToString()));
                orderAccepted = order.get_accepted_orders_by_waiter_id(Convert.ToInt32(txtWaiterSearch.EditValue.ToString()));
                orderDelivred = order.get_delivred_orders_by_waiter_id(Convert.ToInt32(txtWaiterSearch.EditValue.ToString()));
                orderTermined = order.get_termined_orders_by_waiter_id(Convert.ToInt32(txtWaiterSearch.EditValue.ToString()));
                gridControlNewOrders.DataSource = newOrders;
                gridControlOrderAccepted.DataSource = orderAccepted;
                gridControlOrderDelivred.DataSource = orderDelivred;
                gridControlOrderTermined.DataSource = orderTermined;
            }
        }

        private void txtCustommerSearch_EditValueChanged(object sender, EventArgs e)
        {
            if (txtCustommerSearch.EditValue != null)
            {
                newOrders = order.get_new_orders_by_custommer_id(Convert.ToInt32(txtCustommerSearch.EditValue.ToString()));
                orderAccepted = order.get_accepted_orders_by_custommer_id(Convert.ToInt32(txtCustommerSearch.EditValue.ToString()));
                orderDelivred = order.get_delivred_orders_by_custommer_id(Convert.ToInt32(txtCustommerSearch.EditValue.ToString()));
                orderTermined = order.get_termined_orders_by_custommer_id(Convert.ToInt32(txtCustommerSearch.EditValue.ToString()));
                gridControlNewOrders.DataSource = newOrders;
                gridControlOrderAccepted.DataSource = orderAccepted;
                gridControlOrderDelivred.DataSource = orderDelivred;
                gridControlOrderTermined.DataSource = orderTermined;
            }
        }

        private void btnCancelledAll_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }

            DialogResult dialogResult = MessageBox.Show("Sure", "Some Title", MessageBoxButtons.YesNo);
            if (dialogResult == DialogResult.Yes)
            {
                order.update_all_new_orders_cancelled();
                refresh();
                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer finish = new SoundPlayer(@"c:\Wrong.wav");
                    finish.Play();
                }
            }
            else if (dialogResult == DialogResult.No)
            {
                //do something else
            }
        }

        private void btnReturnAccepted_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }

            DialogResult dialogResult = MessageBox.Show("Sure", "Some Title", MessageBoxButtons.YesNo);
            if (dialogResult == DialogResult.Yes)
            {
                order.update_return_all_new_orders();
                refresh();
                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer finish = new SoundPlayer(@"c:\Wrong.wav");
                    finish.Play();
                }
            }
            else if (dialogResult == DialogResult.No)
            {
                //do something else
            }
        }

        private void btnReturnTermined_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }

            DialogResult dialogResult = MessageBox.Show("Sure", "Some Title", MessageBoxButtons.YesNo);
            if (dialogResult == DialogResult.Yes)
            {
                order.update_return_all_accepted_orders();
                refresh();
                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer finish = new SoundPlayer(@"c:\Wrong.wav");
                    finish.Play();
                }
            }
            else if (dialogResult == DialogResult.No)
            {
                //do something else
            }
        }

        private void btnReturnDelivred_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }

            DialogResult dialogResult = MessageBox.Show("Sure", "Some Title", MessageBoxButtons.YesNo);
            if (dialogResult == DialogResult.Yes)
            {
                //order.update_all_delivred_orders();
                refresh();
                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer finish = new SoundPlayer(@"c:\Wrong.wav");
                    finish.Play();
                }
            }
            else if (dialogResult == DialogResult.No)
            {
                //do something else
            }
        }

        private void gridControlNewOrders_Click(object sender, EventArgs e)
        {
            object id = this.tileViewNewOrders.GetRowCellValue(this.tileViewNewOrders.FocusedRowHandle, "id");
            object created_at = this.tileViewNewOrders.GetRowCellValue(this.tileViewNewOrders.FocusedRowHandle, "created_at");
            object token = this.tileViewNewOrders.GetRowCellValue(this.tileViewNewOrders.FocusedRowHandle, "token");

            if (id != null)
            {
                Form_Order_Status form_order_status = new Form_Order_Status();
                form_order_status.setObject(this);
                form_order_status.setEtat("new");
                form_order_status.setOrderID(Convert.ToInt32(id));
                form_order_status.setLabels("  Order Token: #" + token.ToString(), "Ordered At: " + created_at.ToString());
                form_order_status.ShowDialog();
            }
        }

        private void gridControlOrderAccepted_Click(object sender, EventArgs e)
        {
            object id = this.tileViewOrderAccepted.GetRowCellValue(this.tileViewOrderAccepted.FocusedRowHandle, "id");
            object created_at = this.tileViewOrderAccepted.GetRowCellValue(this.tileViewOrderAccepted.FocusedRowHandle, "created_at");
            object token = this.tileViewOrderAccepted.GetRowCellValue(this.tileViewOrderAccepted.FocusedRowHandle, "token");

            if (id != null)
            {
                Form_Order_Status form_order_status = new Form_Order_Status();
                form_order_status.setObject(this);
                form_order_status.setEtat("accepted");
                form_order_status.setOrderID(Convert.ToInt32(id));
                form_order_status.setLabels("  Order Token: #" + token.ToString(), "Ordered At: " + created_at.ToString());
                form_order_status.ShowDialog();
            }
        }

        private void gridControlOrderTermined_Click(object sender, EventArgs e)
        {
            object id = this.tileViewOrderTermined.GetRowCellValue(this.tileViewOrderTermined.FocusedRowHandle, "id");
            object created_at = this.tileViewOrderTermined.GetRowCellValue(this.tileViewOrderTermined.FocusedRowHandle, "created_at");
            object token = this.tileViewOrderTermined.GetRowCellValue(this.tileViewOrderTermined.FocusedRowHandle, "token");

            if (id != null)
            {
                Form_Order_Status form_order_status = new Form_Order_Status();
                form_order_status.setObject(this);
                form_order_status.setEtat("termined");
                form_order_status.setOrderID(Convert.ToInt32(id));
                form_order_status.setLabels("  Order Token: #" + token.ToString(), "Ordered At: " + created_at.ToString());
                form_order_status.ShowDialog();
            }
        }

        private void gridControlOrderDelivred_Click(object sender, EventArgs e)
        {
            object id = this.tileViewOrderDelivred.GetRowCellValue(this.tileViewOrderDelivred.FocusedRowHandle, "id");
            object created_at = this.tileViewOrderDelivred.GetRowCellValue(this.tileViewOrderDelivred.FocusedRowHandle, "created_at");
            object token = this.tileViewOrderDelivred.GetRowCellValue(this.tileViewOrderDelivred.FocusedRowHandle, "token");

            if (id != null)
            {
                Form_Order_Status form_order_status = new Form_Order_Status();
                form_order_status.setObject(this);
                form_order_status.setEtat("delivred");
                form_order_status.setOrderID(Convert.ToInt32(id));
                form_order_status.setLabels("  Order Token: #" + token.ToString(), "Ordered At: " + created_at.ToString());
                form_order_status.ShowDialog();
            }
        }
    }
}