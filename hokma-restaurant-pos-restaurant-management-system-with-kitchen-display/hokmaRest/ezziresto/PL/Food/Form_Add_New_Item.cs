using DevExpress.XtraEditors;
using DevExpress.XtraEditors.ViewInfo;
using DevExpress.XtraGrid;
using DevExpress.XtraGrid.Views.Grid;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Media;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ezziresto.PL.Food
{
    public partial class Form_Add_New_Item : DevExpress.XtraEditors.XtraForm
    {
        BL.FoodItem.FoodItem food_item = new BL.FoodItem.FoodItem();
        Form_Food_Items_List form_food_items_list = null;
        DataTable dt = new DataTable();

        public Form_Add_New_Item()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceProperty.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceVariante.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceGroup.FillAsync();
        }

        public void setObject(Form_Food_Items_List form_food_items_list)
        {
            this.form_food_items_list = form_food_items_list;
        }

        private void btnAdd_Click_1(object sender, EventArgs e)
        {
            if (dxValidationProvider1.Validate())
            {
                byte[] bytes;
                MemoryStream stream = new MemoryStream();
                pictureFoodItem.Image.Save(stream, ImageFormat.Jpeg);
                bytes = stream.ToArray();

                int food_id = food_item.add_food_item(Convert.ToInt32(GroupItem.EditValue),txtName.Text,Convert.ToDecimal(txtPrice.Text), bytes, txtBarCode.Text, hasProperties.EditValue.ToString(), tokenProperty.EditValue.ToString(), hasVariants.EditValue.ToString(), isSpecial.EditValue.ToString(), txtName.Text, DateTime.Now, DateTime.Now);
                GroupItem.Clear();
                txtBarCode.Clear();
                pictureFoodItem.EditValue = null;
                txtName.Clear();
                txtName.Select();

                for (int i = 0; i < gridViewAddedVariants.RowCount; i++)
                {
                    food_item.add_food_with_variations(food_id, Convert.ToInt32(gridViewAddedVariants.GetRowCellValue(i, "id")), Convert.ToDecimal(gridViewAddedVariants.GetRowCellValue(i, "price")), DateTime.Now, DateTime.Now);
                }

                if (this.form_food_items_list != null)
                    this.form_food_items_list.asyncData();

                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                    simpleSound.Play();
                }
            }
            else
            {
                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer simpleSound = new SoundPlayer(@"c:\ValidationError.wav");
                    simpleSound.Play();
                }
            }
        }

        private void checkEditVariant_CheckedChanged(object sender, EventArgs e)
        {
            if (hasVariants.Checked)
            {
                //VarientsView.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
            }
            else
            {
                //VarientsView.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
            }
        }

        private void checkEditProp_CheckedChanged_1(object sender, EventArgs e)
        {
            if (hasProperties.Checked)
            {
                //PropView.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
            }
            else
            {
                //PropView.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
            }
        
        }

        private void tokenProperty_EditValueChanged(object sender, EventArgs e)
        {
        }

        private void tokenProperty_SelectedItemsChanged(object sender, ListChangedEventArgs e)
        {

        }

        private void Form_Add_New_Item_Load(object sender, EventArgs e)
        {
            hasProperties.EditValue = false;
            tokenProperty.EditValue = "";
            hasVariants.EditValue = false;
            isSpecial.EditValue = false;

            if (dt.Columns.Count == 0)
            {
                dt.Columns.Add("id", typeof(string));
                dt.Columns.Add("name", typeof(string));
                dt.Columns.Add("price", typeof(string));
            }
            
            //gridViewAddedVariants.OptionsView.NewItemRowPosition = NewItemRowPosition.Top;

            //gridViewAddedVariants.AddNewRow();

            //Handle the InitNewRow event to initialize newly added rows. To initialize row cells use the SetRowCellValue method
            //gridViewAddedVariants.InitNewRow += (s, ee) => {
            //    GridView view = s as GridView;
            //    view.SetRowCellValue(ee.RowHandle, view.Columns["name"], "CustomName");
            //    view.SetRowCellValue(ee.RowHandle, view.Columns["price"], 1800);
            //};

            //gridViewAddedVariants.AddNewRow();
            //gridViewAddedVariants.SetRowCellValue(GridControl.NewItemRowHandle, gridViewAddedVariants.Columns["name"], "Please enter new value");
            //gridViewAddedVariants.SetRowCellValue(GridControl.NewItemRowHandle, gridViewAddedVariants.Columns["price"], 1800);
        }

        private void tokenProperty_Click(object sender, EventArgs e)
        {

        }

        private void tokenVariante_Click(object sender, EventArgs e)
        {
            //List<string> variants = tokenVariante.EditText.Split(',').ToList<string>();

            //int index = this.getIndex(variants);

            //if (!this.exists(tokenVariante.EditText.Split(',').Last()))
            //{
            //    DataRow NewRow = dt.NewRow();
            //    NewRow[0] = tokenVariante.EditText.Split(',').Last();
            //    NewRow[1] = 0;
            //    dt.Rows.Add(NewRow);
            //    gridControlAddedVariants.DataSource = dt;
            //} else
            //{
            //    MessageBox.Show("Variante déja existé !!!");
            //}
        }

        private void tokenProperty_TokenCheckStateChanged(object sender, EventArgs e)
        {
            
        }

        private void tokenEdit2_Properties_TokenClick(object sender, TokenEditTokenClickEventArgs e)
        {

        }

        private void tokenVariante_EditValueChanged(object sender, EventArgs e)
        {
            
        }

        public bool exists(string value)
        {
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                if (dt.Rows[i][1].ToString() == value)
                    return true;
            }
            return false;
        }

        public int getIndex(string value)
        {
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                if (dt.Rows[i][1].ToString() == value)
                    return i;
            }
            return -1;
        }

        private void tokenVariante_MouseClick(object sender, MouseEventArgs e)
        {
            TokenEdit edit = (TokenEdit)sender;
            TokenEditHitInfo hitInfo = (TokenEditHitInfo)edit.CalcHitInfo(e.Location);
            if (hitInfo.InToken)
            {
                //the token's description is clicked
            }
            if (hitInfo.InGlyph)
            {
                //the token's glyph is clicked
            }
        }

        private void tokenVariante_Properties_TokenRemoved(object sender, TokenEditTokenRemovedEventArgs e)
        {
            int index = this.getIndex(e.Token.ToString());
            if ( index != -1 )
            {
                DataRow dr = dt.Rows[index];
                dr.Delete();
                dt.AcceptChanges();
                gridControlAddedVariants.DataSource = null;
                gridControlAddedVariants.DataSource = dt;
            }
        }

        private void tokenVariante_Properties_TokenAdded(object sender, TokenEditTokenAddedEventArgs e)
        {
            if (!this.exists(e.Token.ToString()))
            {
                DataRow NewRow = dt.NewRow();
                NewRow[0] = tokenVariante.EditValue.ToString().Split(',').Last();
                NewRow[1] = e.Token.ToString();
                NewRow[2] = 0;
                dt.Rows.Add(NewRow);
                gridControlAddedVariants.DataSource = dt;
            }
            else
            {
                MessageBox.Show("Variante déja existé !!!");
            }

        }

        private void checkEdit1_CheckedChanged(object sender, EventArgs e)
        {

        }
    }
}