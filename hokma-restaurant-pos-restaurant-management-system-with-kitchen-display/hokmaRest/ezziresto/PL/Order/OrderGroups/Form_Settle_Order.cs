using DevExpress.XtraEditors;
using DevExpress.XtraEditors.Controls;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Media;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ezziresto.PL.Order.OrderGroups
{
    public partial class Form_Settle_Order : DevExpress.XtraEditors.XtraForm
    {
        BL.Pos.Pos pos = new BL.Pos.Pos();
        BL.TempOrder.TempOrder tempOrder = new BL.TempOrder.TempOrder();
        BL.FoodPurchase.FoodPurchase food_purchase = new BL.FoodPurchase.FoodPurchase();
        BL.Order.Order order = new BL.Order.Order();
        BL.FoodItem.FoodItem food_itemm = new BL.FoodItem.FoodItem();
        DataTable dt = new DataTable();
        DataTable items = new DataTable();
        int order_id = 20;
        int restaurant_id = Properties.Settings.Default.restaurantId;
        int work_period_id = Properties.Settings.Default.restaurantId;
        int user_id = Properties.Settings.Default.userID;
        int branch_id = Properties.Settings.Default.branchId;
        int dept_tag_id = Properties.Settings.Default.deptTagId;
        string user_name = Properties.Settings.Default.userName;
        string branch_name = Properties.Settings.Default.branchName;
        string ref_text = "Ref0000";
        string ref_amount = "1000";
        string dept_tag_name = Properties.Settings.Default.deptTagName;
        string token = Properties.Settings.Default.deptTagName;
        string order_bill = "0000";
        string vat = Properties.Settings.Default.vat;
        string vat_system = Properties.Settings.Default.vatSystem;
        string cgst = Properties.Settings.Default.cgst;
        string sgst = Properties.Settings.Default.sgst;
        string total_payable = "0000";
        string bill_distribution = "0000";
        string paid_amount = "0000";
        string return_amount = "0000";
        int service_charge = 0;
        int discount = 0;
        int dept_commission = 0;
        int is_paid = 0;
        int is_accepted = 0;
        int is_cancelled = 0;
        int is_settled = 0;
        int is_ready = 0;
        int is_delivered = 0;
        int is_cooking = 0;
        string food_group = "Food group";
        string variation = "Variation";
        string properties = "Properties";
        string department_tags = "Department Tags";
        decimal dc = 0;
        decimal total_price = 0;
        decimal net_total_price = 0;
        decimal sgstResult = 0;
        decimal cgstResult = 0;
        decimal discountResult = 0;
        decimal serviceChargeResult = 0;

        public Form_Settle_Order()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource
            sqlDataSourceCustomer.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource
            sqlDataSourceBranch.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource
            sqlDataSourceDepartment.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource
            sqlDataSourceTable.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource
            sqlDataSourceWaiter.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource
            sqlDataSourceItems.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource
            sqlDataSourceFoodItems.Fill();
        }

        private void Form_Settle_Order_Load(object sender, EventArgs e)
        {
            totalPriceCurency.Text = Properties.Settings.Default.currency;
            btnSettleOrder.Enabled = false;
            txtReturnAmount.Visible = false;

            txtSubtotal.Text = this.calculeTotalPrice().ToString();

            if (dt.Columns.Count == 0)
            {
                dt.Columns.Add("ID", typeof(string));
                dt.Columns.Add("Name", typeof(string));
                dt.Columns.Add("Price", typeof(string));
                dt.Columns.Add("Qty", typeof(int));
                dt.Columns.Add("Total", typeof(string));
                dt.Columns.Add("Delete", typeof(string));
            }
            order_details();
            loadItems();

            //DataTable order_dt = order.get_order_group_by_id(this.order_id);

            //if (order_dt.Rows.Count > 0)
            //    alertTotalPrice.Text = this.dc != 0 ? this.dc.ToString() : order_dt.Rows[0]["paid_amount"].ToString();
        }

        public void setOrderId(int order_id)
        {
            this.order_id = order_id;
        }

        public void setDistTotalPrice(decimal dc)
        {
            this.dc = dc;
        }

        private void loadItems()
        {
            items = order.get_food_orders_by_id(this.order_id);
            gridControlItems.DataSource = items;

            for (int i = 0; i < items.Rows.Count; i++)
            {
                this.total_price += Convert.ToDecimal(items.Rows[i]["price"]) * Convert.ToDecimal(items.Rows[i]["quantity"]);
            }

            txtSubtotal.Text = total_price.ToString();
            alertTotalPrice.Text = total_price.ToString();
        }

        private void txtItems_EditValueChanged(object sender, EventArgs e)
        {
            if (txtItems.EditValue != null)
            {
                DataTable data = food_itemm.get_food_item(Convert.ToInt32(txtItems.EditValue.ToString()));

                if (data.Rows.Count > 0)
                {
                    pos.add_order_items(
                        this.order_id,
                        Convert.ToInt32(data.Rows[0]["id"]),//int food_item_id,
                        data.Rows[0]["name"].ToString(),// string food_item,
                        "",// string food_group,
                        "",// string variation,
                        "",// string properties,
                        1,// int quantity,
                        data.Rows[0]["price"].ToString(),// string price,
                        department_tags, // string department_tags,
                        is_cooking,// int is_cooking,
                        is_ready,// int is_ready,
                        DateTime.Now,
                        DateTime.Now
                    );

                    this.loadItems();

                    if (Properties.Settings.Default.sound == "yes")
                    {
                        SoundPlayer simpleSound = new SoundPlayer(@"c:\toggle.wav");
                        simpleSound.Play();
                    }
                }
            }
        }

        private void order_details()
        {
            DataTable details = order.get_order_group_by_id(this.order_id);

            if (details.Rows.Count > 0)
            {
                if(details.Rows[0]["table_name"].ToString() == "")
                {
                    txtTable.Text = "Not Set";
                } else
                {
                    txtTable.Text = details.Rows[0]["table_name"].ToString();
                }
                
                if (details.Rows[0]["user_name"].ToString() == "")
                {
                    txtReceivedby.Text = "Not Set";
                }
                else
                {
                    txtReceivedby.Text = details.Rows[0]["user_name"].ToString();
                }

                if (details.Rows[0]["customer_name"].ToString() == "")
                {
                    txtCustomer.Text = "Not Set";
                }
                else
                {
                    txtCustomer.Text = details.Rows[0]["customer_name"].ToString();
                }
              
                if (details.Rows[0]["waiter_name"].ToString() == "")
                {
                    txtWaiter.Text = "Not Set";
                }
                else
                {
                    txtWaiter.Text = details.Rows[0]["waiter_name"].ToString();
                }

                txtAmount.Text = details.Rows[0]["paid_amount"].ToString();
                txtReturnAmount.Text = details.Rows[0]["return_amount"].ToString();

                txtCGST.Text = details.Rows[0]["cgst"].ToString();
                txtBranch.Text = details.Rows[0]["branch_name"].ToString();
                txtTotalBill.Text = details.Rows[0]["bill_distribution"].ToString();
                txtSubtotal.Text = details.Rows[0]["total_payable"].ToString();
                txtSGST.Text = details.Rows[0]["sgst"].ToString();
                txtServiceCharge.Text = details.Rows[0]["service_charge"].ToString();
                txtPaidAmount.Text = details.Rows[0]["paid_amount"].ToString();
                txtDueAmount.Text = details.Rows[0]["total_payable"].ToString(); // To check...
                txtDiscount.Text = details.Rows[0]["discount"].ToString();
                txtDepartmentCommission.Text = details.Rows[0]["dept_commission"].ToString();
                txtDepartment.Text = details.Rows[0]["dept_tag_name"].ToString();
                txtCustomer.EditValue = details.Rows[0]["customer_id"];
                txtWaiter.EditValue = details.Rows[0]["waiter_id"];
                txtTable.EditValue = details.Rows[0]["table_id"];
                txtBranch.EditValue = details.Rows[0]["branch_id"];
                txtDepartment.EditValue = details.Rows[0]["dept_tag_id"];
                
                if(details.Rows[0]["is_paid"].ToString() == "1")
                {
                    btnPayLater.Enabled = false;
                    btnSettleOrder.Enabled = false;
                }

                //txtTotalBill.ReadOnly = true;
                //txtSubtotal.ReadOnly = true;
                //txtSGST.ReadOnly = true;
                //txtServiceCharge.ReadOnly = true;
                //txtReceivedby.ReadOnly = true;
                //txtPaidAmount.ReadOnly = true;
                //txtDueAmount.ReadOnly = true;
                //txtDiscount.ReadOnly = true;
                //txtDepartmentCommission.ReadOnly = true;
                //txtCGST.ReadOnly = true;
            }
        }

        private void txtAmount_EditValueChanged(object sender, EventArgs e)
        {
            txtReturnAmount.Visible = false;
            if (txtAmount.EditValue != null)
            {
                if( (Convert.ToDecimal(txtAmount.EditValue.ToString()) - Convert.ToDecimal(alertTotalPrice.Text)) >= 0 )
                {
                    btnSettleOrder.Enabled = true;
                    txtReturnAmount.Text = (Convert.ToDecimal(txtAmount.EditValue.ToString()) - Convert.ToDecimal(alertTotalPrice.Text)).ToString();
                    txtReturnAmount.Visible = true;
                } else
                {
                    btnSettleOrder.Enabled = false;
                    txtReturnAmount.Text = "0";
                }
            }
        }

        private void btnSettleOrder_Click(object sender, EventArgs e)
        {
            tempOrder.delete();

            if (Convert.ToDecimal(txtAmount.EditValue.ToString()) >= Convert.ToDecimal(txtDueAmount.Text))
            {
                //txtReturnAmount.Text = (Convert.ToDecimal(txtAmount.EditValue.ToString()) - Convert.ToDecimal(txtDueAmount.Text)).ToString();
                order.order_is_paid_id(this.order_id, 1, txtAmount.Text, txtReturnAmount.Text, DateTime.Now);
                MessageBox.Show(this.order_id + " | " + 1 + " | " + txtAmount.Text + " | " + txtReturnAmount.Text + " | " + DateTime.Now);
                DataTable dTempOrderItems = order.get_food_orders_by_id(this.order_id);

                for (int i = 0; i < dTempOrderItems.Rows.Count; i++)
                {
                    tempOrder.add_temp_order_items(
                        Convert.ToInt32(dTempOrderItems.Rows[i]["order_group_id"]),
                        Convert.ToInt32(dTempOrderItems.Rows[i]["food_item_id"]),//int food_item_id,
                        dTempOrderItems.Rows[i]["food_item"].ToString(),// string food_item,
                        dTempOrderItems.Rows[i]["food_group"].ToString(),// string food_group,
                        dTempOrderItems.Rows[i]["variation"].ToString(),// string variation,
                        dTempOrderItems.Rows[i]["properties"].ToString(),// string properties,
                        Convert.ToInt32(dTempOrderItems.Rows[i]["quantity"]),// int quantity,
                        dTempOrderItems.Rows[i]["price"].ToString(),// string price,
                        dTempOrderItems.Rows[i]["department_tags"].ToString(), // string department_tags,
                        Convert.ToInt32(dTempOrderItems.Rows[i]["is_cooking"]),// int is_cooking,
                        Convert.ToInt32(dTempOrderItems.Rows[i]["is_ready"]),// int is_ready,
                        DateTime.Now,
                        DateTime.Now
                    );

                    DataTable qty_dt = food_purchase.get_food_purchases_history_by_id(Convert.ToInt32(dTempOrderItems.Rows[i]["food_item_id"]));

                    int current_qty = 0;

                    if(qty_dt.Rows.Count > 0)
                        current_qty = Convert.ToInt32(qty_dt.Rows[0]["qty"]);

                    int new_qty = current_qty - Convert.ToInt32(dTempOrderItems.Rows[i]["quantity"]);
                    food_purchase.update_food_stock_qty(Convert.ToInt32(dTempOrderItems.Rows[i]["food_item_id"]), new_qty, DateTime.Now);
                }

                DataTable dTempOrder = order.get_order_group_by_id(this.order_id);

                if (dTempOrder.Rows.Count > 0)
                {
                    tempOrder.add_temp_order_groups(
                                    Convert.ToInt32(dTempOrder.Rows[0]["restaurant_id"]),// int restaurant_id,
                                    Convert.ToInt32(dTempOrder.Rows[0]["work_period_id"]),// int work_period_id,
                                    Convert.ToInt32(dTempOrder.Rows[0]["user_id"]),// int user_id,
                                    dTempOrder.Rows[0]["user_name"].ToString(),// string user_name,
                                    Convert.ToInt32(dTempOrder.Rows[0]["branch_id"]),// int branch_id,
                                    dTempOrder.Rows[0]["branch_name"].ToString(),// string branch_name,
                                    Convert.ToInt32(dTempOrder.Rows[0]["customer_id"]),// int customer_id,
                                    dTempOrder.Rows[0]["customer_name"].ToString(),// string customer_name,
                                    dTempOrder.Rows[0]["ref_text"].ToString(), // string ref_text,
                                    Convert.ToInt32(dTempOrder.Rows[0]["table_id"]), // int table_id,
                                    dTempOrder.Rows[0]["ref_amount"].ToString(),// string ref_amount,
                                    dTempOrder.Rows[0]["table_name"].ToString(),// string table_name,
                                    Convert.ToInt32(dTempOrder.Rows[0]["waiter_id"]),// int waiter_id,
                                    dTempOrder.Rows[0]["waiter_name"].ToString(),// string waiter_name,
                                    Convert.ToInt32(dTempOrder.Rows[0]["dept_tag_id"]),// int dept_tag_id,
                                    dTempOrder.Rows[0]["dept_tag_name"].ToString(),// string dept_tag_name,
                                    dTempOrder.Rows[0]["token"].ToString(),// string token,
                                    dTempOrder.Rows[0]["total_guest"].ToString(),// string total_guest,
                                    Convert.ToInt32(dTempOrder.Rows[0]["service_charge"]),// int service_charge,
                                    Convert.ToInt32(dTempOrder.Rows[0]["discount"]),// int discount,
                                    Convert.ToInt32(dTempOrder.Rows[0]["dept_commission"]),// int dept_commission,
                                    dTempOrder.Rows[0]["order_bill"].ToString(),// string order_bill,
                                    dTempOrder.Rows[0]["vat"].ToString(),// string vat,
                                    dTempOrder.Rows[0]["vat_system"].ToString(),// string vat_system,
                                    dTempOrder.Rows[0]["cgst"].ToString(),// string cgst,
                                    dTempOrder.Rows[0]["sgst"].ToString(),// string sgst,
                                    dTempOrder.Rows[0]["total_payable"].ToString(),// string total_payable,
                                    dTempOrder.Rows[0]["bill_distribution"].ToString(),// string bill_distribution,
                                    dTempOrder.Rows[0]["paid_amount"].ToString(),// string paid_amount,
                                    dTempOrder.Rows[0]["return_amount"].ToString(),// string return_amount,
                                    Convert.ToInt32(dTempOrder.Rows[0]["is_paid"]),// int is_paid,
                                    Convert.ToInt32(dTempOrder.Rows[0]["is_accepted"]),// int is_accepted,
                                    Convert.ToInt32(dTempOrder.Rows[0]["is_cancelled"]),// int is_cancelled,
                                    Convert.ToInt32(dTempOrder.Rows[0]["is_settled"]),// int is_settled,
                                    Convert.ToInt32(dTempOrder.Rows[0]["is_ready"]),// int is_ready,
                                    Convert.ToInt32(dTempOrder.Rows[0]["is_delivered"]),// int is_delivered,
                                    DateTime.Now,
                                    DateTime.Now
                                    );
                }

                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                    simpleSound.Play();
                }

                this.print();

                tempOrder.delete();

                this.Close();
            }
            else
            {
                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer simpleSound = new SoundPlayer(@"c:\ValidationError.wav");
                    simpleSound.Play();
                }

                MessageBox.Show("You must enter the sufficient amount");
            }
        }

        public void print()
        {
            DocumentsViewer.Form_DocViewer frmDoc = new DocumentsViewer.Form_DocViewer();
            frmDoc.printReciept();
            frmDoc.ShowDialog();
        }

        private void repositoryItemButtonDelete_Click(object sender, EventArgs e)
        {
            object order_id = this.gridViewItems.GetRowCellValue(this.gridViewItems.FocusedRowHandle, "id");
            DialogResult dialogResult = MessageBox.Show("Are You Sure,You Whant Delete This Item ?", "Delete This Item", MessageBoxButtons.YesNo);
            if (dialogResult == DialogResult.Yes)
            {
                order.delete_order_item(Convert.ToInt32(order_id));
                this.loadItems();

                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer simpleSound = new SoundPlayer(@"c:\Deleted.wav");
                    simpleSound.Play();
                }

                this.calculeTotalPrice();
            }
            else if (dialogResult == DialogResult.No)
            {
                // do something
            }
        }

        private void txtCustomer_EditValueChanged(object sender, EventArgs e)
        {
            if (txtCustomer.EditValue != null)
            {
                order.update_order_customer_id(this.order_id,Convert.ToInt32(txtCustomer.EditValue),DateTime.Now);
            }
        }

        private void txtWaiter_EditValueChanged(object sender, EventArgs e)
        {
            if (txtWaiter.EditValue != null)
            {
                order.update_order_waiter_id(this.order_id, Convert.ToInt32(txtWaiter.EditValue), DateTime.Now);
            }
        }

        private void txtTable_EditValueChanged(object sender, EventArgs e)
        {
            if (txtTable.EditValue != null)
            {
                order.update_order_table_id(this.order_id, Convert.ToInt32(txtTable.EditValue), DateTime.Now);
            }
        }

        private void txtBranch_EditValueChanged(object sender, EventArgs e)
        {
            if (txtBranch.EditValue != null)
            {
                order.update_order_branch_id(this.order_id, Convert.ToInt32(txtBranch.EditValue), DateTime.Now);
            }
        }

        private void txtDepartment_EditValueChanged(object sender, EventArgs e)
        {
            if (txtDepartment.EditValue != null)
            {
                order.update_order_departement_id(this.order_id, Convert.ToInt32(txtDepartment.EditValue), DateTime.Now);
            }
        }

        public decimal calculeTotalPrice()
        {
            decimal total_price = 0;

            for (int i = 0; i < items.Rows.Count; i++)
            {
                total_price += Convert.ToDecimal(dt.Rows[i]["price"]) * Convert.ToDecimal(dt.Rows[i]["qty"]);
            }

            return total_price;
        }

        private void btnPayLater_Click(object sender, EventArgs e)
        {
            tempOrder.delete();

                txtReturnAmount.Text = (Convert.ToDecimal(txtAmount.EditValue.ToString()) - Convert.ToDecimal(txtDueAmount.Text)).ToString();
                order.order_is_paid_id(this.order_id, 1, txtAmount.Text, txtReturnAmount.Text, DateTime.Now);

                DataTable dTempOrderItems = order.get_food_orders_by_id(this.order_id);

                for (int i = 0; i < dTempOrderItems.Rows.Count; i++)
                {
                    tempOrder.add_temp_order_items(
                        Convert.ToInt32(dTempOrderItems.Rows[i]["order_group_id"]),
                        Convert.ToInt32(dTempOrderItems.Rows[i]["food_item_id"]),//int food_item_id,
                        dTempOrderItems.Rows[i]["food_item"].ToString(),// string food_item,
                        dTempOrderItems.Rows[i]["food_group"].ToString(),// string food_group,
                        dTempOrderItems.Rows[i]["variation"].ToString(),// string variation,
                        dTempOrderItems.Rows[i]["properties"].ToString(),// string properties,
                        Convert.ToInt32(dTempOrderItems.Rows[i]["quantity"]),// int quantity,
                        dTempOrderItems.Rows[i]["price"].ToString(),// string price,
                        dTempOrderItems.Rows[i]["department_tags"].ToString(), // string department_tags,
                        Convert.ToInt32(dTempOrderItems.Rows[i]["is_cooking"]),// int is_cooking,
                        Convert.ToInt32(dTempOrderItems.Rows[i]["is_ready"]),// int is_ready,
                        DateTime.Now,
                        DateTime.Now
                    );

                    DataTable qty_dt = food_purchase.get_food_purchases_history_by_id(Convert.ToInt32(dTempOrderItems.Rows[i]["food_item_id"]));

                    int current_qty = 0;

                    if (qty_dt.Rows.Count > 0)
                        current_qty = Convert.ToInt32(qty_dt.Rows[0]["qty"]);

                    int new_qty = current_qty - Convert.ToInt32(dTempOrderItems.Rows[i]["quantity"]);
                    food_purchase.update_food_stock_qty(Convert.ToInt32(dTempOrderItems.Rows[i]["food_item_id"]), new_qty, DateTime.Now);
                }

                DataTable dTempOrder = order.get_order_group_by_id(this.order_id);

                if (dTempOrder.Rows.Count > 0)
                {
                    tempOrder.add_temp_order_groups(
                                    Convert.ToInt32(dTempOrder.Rows[0]["restaurant_id"]),// int restaurant_id,
                                    Convert.ToInt32(dTempOrder.Rows[0]["work_period_id"]),// int work_period_id,
                                    Convert.ToInt32(dTempOrder.Rows[0]["user_id"]),// int user_id,
                                    dTempOrder.Rows[0]["user_name"].ToString(),// string user_name,
                                    Convert.ToInt32(dTempOrder.Rows[0]["branch_id"]),// int branch_id,
                                    dTempOrder.Rows[0]["branch_name"].ToString(),// string branch_name,
                                    Convert.ToInt32(dTempOrder.Rows[0]["customer_id"]),// int customer_id,
                                    dTempOrder.Rows[0]["customer_name"].ToString(),// string customer_name,
                                    dTempOrder.Rows[0]["ref_text"].ToString(), // string ref_text,
                                    Convert.ToInt32(dTempOrder.Rows[0]["table_id"]), // int table_id,
                                    dTempOrder.Rows[0]["ref_amount"].ToString(),// string ref_amount,
                                    dTempOrder.Rows[0]["table_name"].ToString(),// string table_name,
                                    Convert.ToInt32(dTempOrder.Rows[0]["waiter_id"]),// int waiter_id,
                                    dTempOrder.Rows[0]["waiter_name"].ToString(),// string waiter_name,
                                    Convert.ToInt32(dTempOrder.Rows[0]["dept_tag_id"]),// int dept_tag_id,
                                    dTempOrder.Rows[0]["dept_tag_name"].ToString(),// string dept_tag_name,
                                    dTempOrder.Rows[0]["token"].ToString(),// string token,
                                    dTempOrder.Rows[0]["total_guest"].ToString(),// string total_guest,
                                    Convert.ToInt32(dTempOrder.Rows[0]["service_charge"]),// int service_charge,
                                    Convert.ToInt32(dTempOrder.Rows[0]["discount"]),// int discount,
                                    Convert.ToInt32(dTempOrder.Rows[0]["dept_commission"]),// int dept_commission,
                                    dTempOrder.Rows[0]["order_bill"].ToString(),// string order_bill,
                                    dTempOrder.Rows[0]["vat"].ToString(),// string vat,
                                    dTempOrder.Rows[0]["vat_system"].ToString(),// string vat_system,
                                    dTempOrder.Rows[0]["cgst"].ToString(),// string cgst,
                                    dTempOrder.Rows[0]["sgst"].ToString(),// string sgst,
                                    dTempOrder.Rows[0]["total_payable"].ToString(),// string total_payable,
                                    dTempOrder.Rows[0]["bill_distribution"].ToString(),// string bill_distribution,
                                    dTempOrder.Rows[0]["paid_amount"].ToString(),// string paid_amount,
                                    dTempOrder.Rows[0]["return_amount"].ToString(),// string return_amount,
                                    Convert.ToInt32(dTempOrder.Rows[0]["is_paid"]),// int is_paid,
                                    Convert.ToInt32(dTempOrder.Rows[0]["is_accepted"]),// int is_accepted,
                                    Convert.ToInt32(dTempOrder.Rows[0]["is_cancelled"]),// int is_cancelled,
                                    Convert.ToInt32(dTempOrder.Rows[0]["is_settled"]),// int is_settled,
                                    Convert.ToInt32(dTempOrder.Rows[0]["is_ready"]),// int is_ready,
                                    Convert.ToInt32(dTempOrder.Rows[0]["is_delivered"]),// int is_delivered,
                                    DateTime.Now,
                                    DateTime.Now
                                    );
                }

                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                    simpleSound.Play();
                }

                //this.print();

                tempOrder.delete();

                this.Close();
        }

        private void txtCGST_EditValueChanged(object sender, EventArgs e)
        {
            this.net_total_price = this.total_price;
            txtSubtotal.Text = this.net_total_price.ToString();
            alertTotalPrice.Text = this.net_total_price.ToString();
            if (txtCGST.EditValue != null)
            {
                this.cgstResult = (this.net_total_price * Convert.ToDecimal(txtCGST.EditValue) / 100);
                alertTotalPrice.Text = (this.net_total_price + this.cgstResult + this.sgstResult + this.serviceChargeResult).ToString();
            }
        }

        private void txtSGST_EditValueChanged(object sender, EventArgs e)
        {
            this.net_total_price = this.total_price;
            txtSubtotal.Text = this.net_total_price.ToString();
            alertTotalPrice.Text = this.net_total_price.ToString();
            if (txtSGST.EditValue != null)
            {
                this.sgstResult = (this.net_total_price * Convert.ToDecimal(txtSGST.EditValue) / 100);
                alertTotalPrice.Text = (this.net_total_price + this.sgstResult + this.cgstResult + this.serviceChargeResult).ToString();
            }
        }

        private void txtServiceCharge_EditValueChanged(object sender, EventArgs e)
        {
            this.net_total_price = this.total_price;
            txtSubtotal.Text = this.net_total_price.ToString();
            alertTotalPrice.Text = this.net_total_price.ToString();
            if (txtServiceCharge.EditValue != null)
            {
                this.serviceChargeResult = (this.net_total_price * Convert.ToDecimal(txtServiceCharge.EditValue) / 100);
                alertTotalPrice.Text = (this.net_total_price + this.cgstResult + this.sgstResult + this.serviceChargeResult).ToString();
            }
        }

        private void txtDiscount_EditValueChanged(object sender, EventArgs e)
        {
            this.net_total_price = this.total_price;
            txtSubtotal.Text = this.net_total_price.ToString();
            alertTotalPrice.Text = this.net_total_price.ToString();
            if (txtDiscount.EditValue != null)
            {
                this.net_total_price = this.net_total_price - (this.net_total_price * Convert.ToDecimal(txtDiscount.EditValue) / 100);
                alertTotalPrice.Text = (this.net_total_price + this.cgstResult + this.sgstResult + this.serviceChargeResult).ToString();
            }
        }
    }
}