using DevExpress.Data;
using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Media;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ezziresto.PL.Order.OrderGroups
{
    public partial class Form_Order_Groups : DevExpress.XtraEditors.XtraForm
    {
        BL.TempOrder.TempOrder tempOrder = new BL.TempOrder.TempOrder();
        BL.Order.Order order = new BL.Order.Order();
        BL.Pos.Pos pos = new BL.Pos.Pos();
        string whichOne = "";
        bool FromPos = false;
        int restaurant_id = Properties.Settings.Default.restaurantId;
        int work_period_id = Properties.Settings.Default.restaurantId;
        int user_id = Properties.Settings.Default.userID;
        int branch_id = Properties.Settings.Default.branchId;
        int dept_tag_id = Properties.Settings.Default.deptTagId;
        string user_name = Properties.Settings.Default.userName;
        string branch_name = Properties.Settings.Default.branchName;
        string ref_text = "Ref0000";
        string ref_amount = "1000";
        string dept_tag_name = Properties.Settings.Default.deptTagName;
        string token = Properties.Settings.Default.deptTagName;
        string order_bill = "0000";
        string vat = Properties.Settings.Default.vat;
        string vat_system = Properties.Settings.Default.vatSystem;
        string cgst = Properties.Settings.Default.cgst;
        string sgst = Properties.Settings.Default.sgst;
        string total_payable = "0000";
        string bill_distribution = "0000";
        string paid_amount = "0000";
        string return_amount = "0000";
        int service_charge = 0;
        int discount = 0;
        int dept_commission = 0;
        int is_paid = 0;
        int is_accepted = 0;
        int is_cancelled = 0;
        int is_settled = 0;
        int is_ready = 0;
        int is_delivered = 0;
        int is_cooking = 0;
        string food_group = "Food group";
        string variation = "Variation";
        string properties = "Properties";
        string department_tags = "Department Tags";
        decimal sc = 0;
        decimal dc = 0;
        decimal dcgst = 0;

        public Form_Order_Groups()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceClients.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceSubmitted.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceSattled.FillAsync();
        }

        public void setWhichOne(string whichOne)
        {
            this.whichOne = whichOne;
        }
        public void setFromPos(bool FromPos)
        {
            this.FromPos = FromPos;
        }

        private void txtClient_EditValueChanged(object sender, EventArgs e)
        {
            gridControlSettled.DataSource = pos.get_food_orders_by_client(Convert.ToInt32(txtClient.EditValue));
            gridControlSubmitted.DataSource = pos.get_food_orders_by_client(Convert.ToInt32(txtClient.EditValue));
        }

        private void Form_Order_Groups_Load(object sender, EventArgs e)
        {
            if( this.whichOne == "Settled")
            {
                this.tabbedControlGroup1.SelectedTabPage = this.layoutControlGroup1;
            }
        }

        private void btnPos_Click(object sender, EventArgs e)
        {
            if (this.FromPos)
            {
                this.Close();
            }
            else
            {
                PL.Pos.Form_Pos pos = new PL.Pos.Form_Pos();
                pos.ShowDialog();
            }
        }

        private void btnRefresh_Click(object sender, EventArgs e)
        {
            textPeriodeDate.EditValue = "";
            startDate.Text = DateTime.Now.ToString();
            endDate.Text = DateTime.Now.ToString();
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Wrong.wav");
                simpleSound.Play();
            }
        }

        private void repositoryItemButtonSettledView_Click(object sender, EventArgs e)
        {
            object order_id = this.gridViewSettled.GetRowCellValue(this.gridViewSettled.FocusedRowHandle, "id");
            Form_Order_Details order_details = new Form_Order_Details();
            order_details.setOrderId(Convert.ToInt32(order_id.ToString()));
            order_details.ShowDialog();
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
        }

        private void repositoryItemButtonSettledPrint_Click(object sender, EventArgs e)
        {
            object order_id = this.gridViewSettled.GetRowCellValue(this.gridViewSettled.FocusedRowHandle, "id");
            
            tempOrder.delete();

            DataTable dt = order.get_order_group_by_id(Convert.ToInt32(order_id));

            if( dt.Rows.Count > 0 )
            {
                tempOrder.add_temp_order_groups(
                Convert.ToInt32(dt.Rows[0]["restaurant_id"]),// int restaurant_id,
                Convert.ToInt32(dt.Rows[0]["work_period_id"]),// int work_period_id,
                Convert.ToInt32(dt.Rows[0]["user_id"]),// int user_id,
                dt.Rows[0]["user_name"].ToString(),// string user_name,
                Convert.ToInt32(dt.Rows[0]["branch_id"]),// int branch_id,
                dt.Rows[0]["branch_name"].ToString(),// string branch_name,
                Convert.ToInt32(dt.Rows[0]["customer_id"]),// int customer_id,
                dt.Rows[0]["customer_name"].ToString(),// string customer_name,
                dt.Rows[0]["ref_text"].ToString(), // string ref_text,
                Convert.ToInt32(dt.Rows[0]["table_id"]), // int table_id,
                dt.Rows[0]["ref_amount"].ToString(),// string ref_amount,
                dt.Rows[0]["table_name"].ToString(),// string table_name,
                Convert.ToInt32(dt.Rows[0]["waiter_id"]),// int waiter_id,
                dt.Rows[0]["waiter_name"].ToString(),// string waiter_name,
                Convert.ToInt32(dt.Rows[0]["dept_tag_id"]),// int dept_tag_id,
                dt.Rows[0]["dept_tag_name"].ToString(),// string dept_tag_name,
                dt.Rows[0]["token"].ToString(),// string token,
                dt.Rows[0]["total_guest"].ToString(),// string total_guest,
                Convert.ToInt32(dt.Rows[0]["service_charge"]),// int service_charge,
                Convert.ToInt32(dt.Rows[0]["discount"]),// int discount,
                Convert.ToInt32(dt.Rows[0]["dept_commission"]),// int dept_commission,
                dt.Rows[0]["order_bill"].ToString(),// string order_bill,
                dt.Rows[0]["vat"].ToString(),// string vat,
                dt.Rows[0]["vat_system"].ToString(),// string vat_system,
                dt.Rows[0]["cgst"].ToString(),// string cgst,
                dt.Rows[0]["sgst"].ToString(),// string sgst,
                dt.Rows[0]["total_payable"].ToString(),// string total_payable,
                dt.Rows[0]["bill_distribution"].ToString(),// string bill_distribution,
                dt.Rows[0]["paid_amount"].ToString(),// string paid_amount,
                dt.Rows[0]["return_amount"].ToString(),// string return_amount,
                Convert.ToInt32(dt.Rows[0]["is_paid"]),// int is_paid,
                Convert.ToInt32(dt.Rows[0]["is_accepted"]),// int is_accepted,
                Convert.ToInt32(dt.Rows[0]["is_cancelled"]),// int is_cancelled,
                Convert.ToInt32(dt.Rows[0]["is_settled"]),// int is_settled,
                Convert.ToInt32(dt.Rows[0]["is_ready"]),// int is_ready,
                Convert.ToInt32(dt.Rows[0]["is_delivered"]),// int is_delivered,
                DateTime.Now,
                DateTime.Now
                );

                DataTable items = order.get_food_orders_by_id(Convert.ToInt32(order_id));

                for (int i = 0; i < items.Rows.Count; i++)
                {
                    tempOrder.add_temp_order_items(
                        Convert.ToInt32(order_id),
                        Convert.ToInt32(items.Rows[i]["id"]),//int food_item_id,
                        items.Rows[i]["food_item"].ToString(),// string food_item,
                        items.Rows[i]["food_group"].ToString(),// string food_group,
                        items.Rows[i]["variation"].ToString(),// string variation,
                        items.Rows[i]["properties"].ToString(),// string properties,
                        Convert.ToInt32(items.Rows[i]["quantity"]),// int quantity,
                        items.Rows[i]["price"].ToString(),// string price,
                        items.Rows[i]["department_tags"].ToString(), // string department_tags,
                        Convert.ToInt32(items.Rows[i]["is_cooking"]),// int is_cooking,
                        Convert.ToInt32(items.Rows[i]["is_ready"]),// int is_ready,
                        DateTime.Now,
                        DateTime.Now
                    );
                }

                this.print();
            }
        }

        public void print()
        {
            DocumentsViewer.Form_DocViewer frmDoc = new DocumentsViewer.Form_DocViewer();
            frmDoc.printReciept();
            frmDoc.ShowDialog();
        }

        private void repositoryItemButtonSettledAction_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            object order_id = this.gridViewSettled.GetRowCellValue(this.gridViewSettled.FocusedRowHandle, "id");
            Form_Settle_Order order = new Form_Settle_Order();
            order.setOrderId(Convert.ToInt32(order_id.ToString()));
            order.ShowDialog();
        }

        private void repositoryItemButtonSubmittedOrderDetails_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            object order_id = this.gridViewISubmitted.GetRowCellValue(this.gridViewISubmitted.FocusedRowHandle, "id");
            Form_Order_Details order_details = new Form_Order_Details();
            order_details.setOrderId(Convert.ToInt32(order_id.ToString()));
            order_details.ShowDialog();
        }

        private void repositoryItemButtonSubmittedAction_Click(object sender, EventArgs e)
        {
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                simpleSound.Play();
            }
            object order_id = this.gridViewISubmitted.GetRowCellValue(this.gridViewISubmitted.FocusedRowHandle, "id");
            Form_Settle_Order order = new Form_Settle_Order();
            order.setOrderId(Convert.ToInt32(order_id.ToString()));
            order.ShowDialog();
        }

        private void repositoryItemButtonSubmittedPrint_Click(object sender, EventArgs e)
        {
            object order_id = this.gridViewISubmitted.GetRowCellValue(this.gridViewISubmitted.FocusedRowHandle, "id");
            
            tempOrder.delete();

            DataTable dt = order.get_order_group_by_id(Convert.ToInt32(order_id));

            if (dt.Rows.Count > 0)
            {
                tempOrder.add_temp_order_groups(
                Convert.ToInt32(dt.Rows[0]["restaurant_id"]),// int restaurant_id,
                Convert.ToInt32(dt.Rows[0]["work_period_id"]),// int work_period_id,
                Convert.ToInt32(dt.Rows[0]["user_id"]),// int user_id,
                dt.Rows[0]["user_name"].ToString(),// string user_name,
                Convert.ToInt32(dt.Rows[0]["branch_id"]),// int branch_id,
                dt.Rows[0]["branch_name"].ToString(),// string branch_name,
                Convert.ToInt32(dt.Rows[0]["customer_id"]),// int customer_id,
                dt.Rows[0]["customer_name"].ToString(),// string customer_name,
                dt.Rows[0]["ref_text"].ToString(), // string ref_text,
                Convert.ToInt32(dt.Rows[0]["table_id"]), // int table_id,
                dt.Rows[0]["ref_amount"].ToString(),// string ref_amount,
                dt.Rows[0]["table_name"].ToString(),// string table_name,
                Convert.ToInt32(dt.Rows[0]["waiter_id"]),// int waiter_id,
                dt.Rows[0]["waiter_name"].ToString(),// string waiter_name,
                Convert.ToInt32(dt.Rows[0]["dept_tag_id"]),// int dept_tag_id,
                dt.Rows[0]["dept_tag_name"].ToString(),// string dept_tag_name,
                dt.Rows[0]["token"].ToString(),// string token,
                dt.Rows[0]["total_guest"].ToString(),// string total_guest,
                Convert.ToInt32(dt.Rows[0]["service_charge"]),// int service_charge,
                Convert.ToInt32(dt.Rows[0]["discount"]),// int discount,
                Convert.ToInt32(dt.Rows[0]["dept_commission"]),// int dept_commission,
                dt.Rows[0]["order_bill"].ToString(),// string order_bill,
                dt.Rows[0]["vat"].ToString(),// string vat,
                dt.Rows[0]["vat_system"].ToString(),// string vat_system,
                dt.Rows[0]["cgst"].ToString(),// string cgst,
                dt.Rows[0]["sgst"].ToString(),// string sgst,
                dt.Rows[0]["total_payable"].ToString(),// string total_payable,
                dt.Rows[0]["bill_distribution"].ToString(),// string bill_distribution,
                dt.Rows[0]["paid_amount"].ToString(),// string paid_amount,
                dt.Rows[0]["return_amount"].ToString(),// string return_amount,
                Convert.ToInt32(dt.Rows[0]["is_paid"]),// int is_paid,
                Convert.ToInt32(dt.Rows[0]["is_accepted"]),// int is_accepted,
                Convert.ToInt32(dt.Rows[0]["is_cancelled"]),// int is_cancelled,
                Convert.ToInt32(dt.Rows[0]["is_settled"]),// int is_settled,
                Convert.ToInt32(dt.Rows[0]["is_ready"]),// int is_ready,
                Convert.ToInt32(dt.Rows[0]["is_delivered"]),// int is_delivered,
                DateTime.Now,
                DateTime.Now
                );

                DataTable items = order.get_food_orders_by_id(Convert.ToInt32(order_id));


                for (int i = 0; i < items.Rows.Count; i++)
                {
                    tempOrder.add_temp_order_items(
                        Convert.ToInt32(order_id),
                        Convert.ToInt32(items.Rows[i]["id"]),//int food_item_id,
                        items.Rows[i]["food_item"].ToString(),// string food_item,
                        items.Rows[i]["food_group"].ToString(),// string food_group,
                        items.Rows[i]["variation"].ToString(),// string variation,
                        items.Rows[i]["properties"].ToString(),// string properties,
                        Convert.ToInt32(items.Rows[i]["quantity"]),// int quantity,
                        items.Rows[i]["price"].ToString(),// string price,
                        items.Rows[i]["department_tags"].ToString(), // string department_tags,
                        Convert.ToInt32(items.Rows[i]["is_cooking"]),// int is_cooking,
                        Convert.ToInt32(items.Rows[i]["is_ready"]),// int is_ready,
                        DateTime.Now,
                        DateTime.Now
                    );
                }

                this.print();
            }
        }

        private void repositoryItemButtonDelete_Click(object sender, EventArgs e)
        {
            object order_id = this.gridViewSettled.GetRowCellValue(this.gridViewSettled.FocusedRowHandle, "id");
            DialogResult dialogResult = MessageBox.Show("Are You Sure,You Whant Delete This Item ?", "Delete This Item", MessageBoxButtons.YesNo);
            if (dialogResult == DialogResult.Yes)
            {
                order.delete_order(Convert.ToInt32(order_id));
                sqlDataSourceSattled.FillAsync();
                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer simpleSound = new SoundPlayer(@"c:\Deleted.wav");
                    simpleSound.Play();
                }
            }
            else if (dialogResult == DialogResult.No)
            {
                // do something
            }
        }

        private void repositoryItemButtonOrdDelete_Click(object sender, EventArgs e)
        {
            object order_id = this.gridViewISubmitted.GetRowCellValue(this.gridViewISubmitted.FocusedRowHandle, "id");
            DialogResult dialogResult = MessageBox.Show("Are You Sure,You Whant Delete This Item ?", "Delete This Item", MessageBoxButtons.YesNo);
            if (dialogResult == DialogResult.Yes)
            {
                order.delete_order(Convert.ToInt32(order_id));
                sqlDataSourceSubmitted.FillAsync();
                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer simpleSound = new SoundPlayer(@"c:\Deleted.wav");
                    simpleSound.Play();
                }
            }
            else if (dialogResult == DialogResult.No)
            {
                // do something
            }
        }

        private void textPeriodeDate_EditValueChanged(object sender, EventArgs e)
        {
            if (textPeriodeDate.EditValue.ToString() == "All")
            {
                gridViewISubmitted.ActiveFilterString = null;
                gridViewSettled.ActiveFilterString = null;
            }
            else if (textPeriodeDate.EditValue.ToString() == "To Day")
            {
                gridViewISubmitted.ActiveFilterString = string.Format("IsOutlookIntervalToday([created_at])");
                gridViewSettled.ActiveFilterString = string.Format("IsOutlookIntervalToday([created_at])");
            }
            else if (textPeriodeDate.EditValue.ToString() == "This Week")
            {
                gridViewISubmitted.ActiveFilterString = string.Format("IsThisWeek([created_at])");
                gridViewSettled.ActiveFilterString = string.Format("IsThisWeek([created_at])");
            }
            else if (textPeriodeDate.EditValue.ToString() == "Last Week")
            {
                gridViewISubmitted.ActiveFilterString = string.Format("IsOutlookIntervalLastWeek([created_at])");
                gridViewSettled.ActiveFilterString = string.Format("IsOutlookIntervalLastWeek([created_at])");
            }
            else if (textPeriodeDate.EditValue.ToString() == "Newest")
            {
                gridViewISubmitted.Columns["id"].SortOrder = ColumnSortOrder.Ascending;
                gridViewSettled.Columns["id"].SortOrder = ColumnSortOrder.Ascending;
            }
            else if (textPeriodeDate.EditValue.ToString() == "Oldest")
            {
                gridViewISubmitted.Columns["id"].SortOrder = ColumnSortOrder.Descending;
                gridViewSettled.Columns["id"].SortOrder = ColumnSortOrder.Descending;
            }
            else if (textPeriodeDate.EditValue.ToString() == "Between the dates")
            {
                startDate.Enabled = true;
                endDate.Enabled = true;
                gridViewISubmitted.ActiveFilterString = string.Format("[created_at] Between(#" + startDate.DateTime + "#, #" + endDate.DateTime + "#)");
                gridViewSettled.ActiveFilterString = string.Format("[created_at] Between(#" + startDate.DateTime + "#, #" + endDate.DateTime + "#)");
            }
        }
    }
}