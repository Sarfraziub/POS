using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Media;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ezziresto.PL.Stock.IngredientPurchase
{
    public partial class Form_Edit_Ingredient_Purchases : DevExpress.XtraEditors.XtraForm
    {
        BL.IngredientPurchase.IngredientPurchase ingredient_purchase = new BL.IngredientPurchase.IngredientPurchase();
        BL.IngredientItem.IngredientItem ingredient_item = new BL.IngredientItem.IngredientItem();
        BL.TempIngredientPurchase.TempIngredientPurchase temp_ingredient_purchase = new BL.TempIngredientPurchase.TempIngredientPurchase();
        Form_Ingredient_Purchases_List form_ingredient_purchases_list = null;
        DataTable dt = new DataTable();
        DataTable tb = new DataTable();
        int ingredient_purchase_id = 0;
        int current_item = 0;
        int order_id = 0;
        int row = 0;
        Decimal total_price = 0;

        public Form_Edit_Ingredient_Purchases()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceBranch.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceSupplier.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSource1.FillAsync();
        }

        public void setOrderID(int order_id)
        {
            this.order_id = order_id;

            if (dt.Columns.Count == 0)
            {
                dt.Columns.Add("Food ID", typeof(string));
                dt.Columns.Add("Product Name", typeof(string));
                dt.Columns.Add("Product Qty", typeof(string));
                dt.Columns.Add("Sale Price", typeof(string));
                dt.Columns.Add("Discount", typeof(string));
                dt.Columns.Add("Total", typeof(string));
            }
            Show();
        }

        private void Show()
        {
            total_price = 0;
            btnAdd.Enabled = false;
            dt.Clear();

            if (row == 0)
                tb = ingredient_purchase.get_ingredient_purchase(this.order_id);

            if (tb.Rows.Count <= 0)
            {
                MessageBox.Show("There is no data in this page");
            }
            else
            {
                //txtSalePrice.Enabled = false;
                //txtQtyUpdate.Enabled = false;
                //txtProdUnit.Enabled = false;
                //txtDiscount.Enabled = false;
                //btnDelete.Enabled = false;

                txtBranch.EditValue = tb.Rows[row]["branch_id"];
                fieldNameSupplier.EditValue = tb.Rows[row]["supplier_id"];
                purchaseDate.EditValue = tb.Rows[row]["purchase_date"];
                txtDesc.Text = tb.Rows[row]["desciption"].ToString();
                txtPaymentType.EditValue = tb.Rows[row]["payment_id"];

                DataTable order_details;

                if (row == 0)
                    order_details = ingredient_purchase.get_ingredient_food_purchases_histories_by_id(this.order_id);
                else
                    order_details = ingredient_purchase.get_ingredient_food_purchases_histories_by_id(Convert.ToInt32(tb.Rows[row]["id"]));

                for (int i = 0; i < order_details.Rows.Count; i++)
                {
                    DataTable data = ingredient_item.get_ingredient_item(Convert.ToInt32(order_details.Rows[i]["id"]));

                    if (data.Rows.Count > 0)
                    {
                        DataRow NewRow = dt.NewRow();

                        NewRow[0] = data.Rows[0]["id"];
                        NewRow[1] = data.Rows[0]["name"];
                        NewRow[2] = order_details.Rows[0]["qty"];
                        NewRow[3] = data.Rows[0]["price"];
                        NewRow[4] = 0;
                        NewRow[5] = tb.Rows[0]["total_bill"];

                        total_price += Math.Round(Convert.ToDecimal(tb.Rows[0]["total_bill"]), 2);

                        dt.Rows.Add(NewRow);
                        gridControlPurchase.DataSource = dt;

                        if (Properties.Settings.Default.sound == "yes")
                        {
                            SoundPlayer simpleSound = new SoundPlayer(@"c:\toggle.wav");
                            simpleSound.Play();
                        }
                    }
                }
                txtFinalPrice.Text = total_price.ToString() + " DA";
                alertTotalPriceScreen.Text = total_price.ToString();
            }
        }

        public void loadData()
        {
            temp_ingredient_purchase.delete();

            DataTable tb = ingredient_purchase.get_ingredient_purchase(this.ingredient_purchase_id);
            if (tb.Rows.Count > 0)
            {
                txtBranch.EditValue = tb.Rows[0]["branch_id"];
                fieldNameSupplier.EditValue = tb.Rows[0]["supplier_id"];
                purchaseDate.EditValue = tb.Rows[0]["purchase_date"];
                txtDesc.Text = tb.Rows[0]["desciption"].ToString();
                txtPaymentType.EditValue = tb.Rows[0]["payment_id"];

                temp_ingredient_purchase.add_temp_ingredient_purchase(Convert.ToInt32(tb.Rows[0]["branch_id"]), Convert.ToInt32(tb.Rows[0]["supplier_id"]), Convert.ToInt32(tb.Rows[0]["payment_id"]), tb.Rows[0]["supplier_name"].ToString(), Convert.ToInt32(tb.Rows[0]["invoice_number"]), Convert.ToDateTime(tb.Rows[0]["purchase_date"]), tb.Rows[0]["desciption"].ToString(), tb.Rows[0]["payment_type"].ToString(), Convert.ToDecimal(tb.Rows[0]["total_bill"]), Convert.ToDecimal(tb.Rows[0]["paid_amount"]), Convert.ToDecimal(tb.Rows[0]["credit_amount"]), Convert.ToDateTime(tb.Rows[0]["created_at"]), Convert.ToDateTime(tb.Rows[0]["updated_at"]));

                DataTable items = ingredient_purchase.get_ingredient_food_purchases_histories_by_id(Convert.ToInt32(tb.Rows[0]["id"]));

                for (int i = 0; i < items.Rows.Count; i++)
                {
                    temp_ingredient_purchase.add_temp_ingredient_purchase_history(Convert.ToInt32(items.Rows[i]["branch_id"]), Convert.ToInt32(items.Rows[i]["ingredient_purchase_id"]), Convert.ToInt32(items.Rows[i]["ingredient_id"]), items.Rows[i]["ingredient_name"].ToString(), Convert.ToInt32(items.Rows[i]["qty"]), Convert.ToInt32(items.Rows[i]["rate"]), Convert.ToInt32(items.Rows[i]["rate"]), Convert.ToDateTime(items.Rows[i]["created_at"]), Convert.ToDateTime(items.Rows[i]["updated_at"]));
                }
            }
        }

        public void setObject(Form_Ingredient_Purchases_List form_ingredient_purchases_list)
        {
            this.form_ingredient_purchases_list = form_ingredient_purchases_list;
        }

        public void setID(int ingredient_purchase_id)
        {
            this.ingredient_purchase_id = ingredient_purchase_id;
        }

        private void btnAdd_Click(object sender, EventArgs e)
        {
            if (dxValidationProvider1.Validate())
            {
                ingredient_purchase.update_ingredient_purchase(this.ingredient_purchase_id,Convert.ToInt32(txtBranch.EditValue), Convert.ToInt32(fieldNameSupplier.EditValue), Convert.ToInt32(txtPaymentType.EditValue), "Supplier name", 1, DateTime.Now, txtDesc.Text, txtPaymentType.Text, 13, 12, 10, DateTime.Now);

                if (this.form_ingredient_purchases_list != null)
                    this.form_ingredient_purchases_list.asyncData();

                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                    simpleSound.Play();
                }
            }
            else
            {
                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer simpleSound = new SoundPlayer(@"c:\ValidationError.wav");
                    simpleSound.Play();
                }
            }
        }

        private void Form_Edit_Ingredient_Purchases_Load(object sender, EventArgs e)
        {
            totalPriceCurency.Text = Properties.Settings.Default.currency;
            loadData();
        }

        private void btnShftLeft_Click(object sender, EventArgs e)
        {
            if (row == 0)
            {
                tb.Clear();
                tb = ingredient_purchase.get_ingredient_purchases();
                row = Convert.ToInt32(tb.Rows.Count) - 1;
                Show();
            }
            else
            {
                row--;
                Show();
            }
        }

        private void btnShftRight_Click(object sender, EventArgs e)
        {
            tb.Clear();
            tb = ingredient_purchase.get_ingredient_purchases();
            if (Convert.ToInt32(tb.Rows.Count) - 1 == row)
            {
                row = 0;
                Show();
            }
            else
            {
                row++;
                Show();
            }
        }

        private void Form_Edit_Ingredient_Purchases_FormClosed(object sender, FormClosedEventArgs e)
        {
            temp_ingredient_purchase.delete();
        }

        public void print()
        {
            DocumentsViewer.Form_DocViewer frmDoc = new DocumentsViewer.Form_DocViewer();
            frmDoc.printInvoiceIngredientPurchase();
            frmDoc.ShowDialog();
        }

        private void btnPrint_Click(object sender, EventArgs e)
        {
            this.print();

        }
    }
}