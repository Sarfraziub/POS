using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Media;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ezziresto.PL.User.DeliveryUser
{
    public partial class Form_Delivery_User : DevExpress.XtraEditors.XtraForm
    {
        BL.User.User user = new BL.User.User();
        DataTable tb,users = new DataTable();
        Form_Delivery_Users_List form_users_list;
        int user_id = 0;
        int max_id = 0;
        int row = 0;

        public Form_Delivery_User()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceUser.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceBranch.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourcePermissionGroup.FillAsync();
        }

        public void setObject(Form_Delivery_Users_List form_users_list)
        {
            this.form_users_list = form_users_list;
        }

        public void setID(int user_id)
        {
            this.user_id = user_id;
            this.row = user_id;
        }

        public void last_id()
        {
            txtID.Text = (Convert.ToInt32(user.get_last_id())+1).ToString();
            this.max_id = Convert.ToInt32(user.get_last_id());
            txtName.Clear();
            txtNotes.Clear();
            txtPhone.Clear();
            memoAdress.Clear();
            pictureEditWaiter.EditValue = null;

            btnAdd.Enabled = true;
            btnRefresh.Enabled = true;
            btnDelete.Enabled = false;
            btnDeleteAll.Enabled = false;
            btnSave.Enabled = false;
        }

        public void load()
        {
            //DataTable tb = user.get_user(Convert.ToInt32(txtID.Text));
            if (this.users.Rows.Count <= row)
            {
                MessageBox.Show("Aucune donnée sur cet écran");
            }
            else
            {
                txtID.Text = this.users.Rows[row]["id"].ToString();
                txtName.Text = this.users.Rows[row]["name"].ToString();
                memoAdress.Text = this.users.Rows[row]["address"].ToString();
                txtPassword.Text = this.users.Rows[row]["password"].ToString();
                txtPhone.Text = this.users.Rows[row]["phn_no"].ToString();
                txtBranch.EditValue = this.users.Rows[row]["branch_id"];
                pictureEditWaiter.EditValue = this.users.Rows[row]["image"];
                txtEmail.Text = this.users.Rows[row]["email"].ToString();
                isActive.EditValue = this.users.Rows[row]["is_active"];
                isBanned.EditValue = this.users.Rows[row]["is_banned"];
                txtPermissionGroup.EditValue = this.users.Rows[row]["permission_group_id"];

                btnAdd.Enabled = false;
                btnRefresh.Enabled = true;
                btnDelete.Enabled = true;
                btnDeleteAll.Enabled = true;
                btnSave.Enabled = true;
            }

        }

        public void Get(int id)
        {
            DataTable tb = user.get_user(id);

            if (tb.Rows.Count <= 0)
            {
                MessageBox.Show("Aucune donnée sur cet écran");
            }
            else
            {
                txtID.Text = tb.Rows[0]["id"].ToString();
                txtName.Text = tb.Rows[0]["name"].ToString();
                memoAdress.Text = tb.Rows[0]["address"].ToString();
                txtPassword.Text = this.users.Rows[row]["password"].ToString();
                txtPhone.Text = tb.Rows[0]["phn_no"].ToString();
                txtBranch.EditValue = tb.Rows[0]["branch_id"];
                pictureEditWaiter.EditValue = tb.Rows[0]["image"];
                txtEmail.Text = tb.Rows[0]["email"].ToString();
                isActive.EditValue = tb.Rows[0]["is_active"];
                isBanned.EditValue = tb.Rows[0]["is_banned"];
                txtPermissionGroup.EditValue = tb.Rows[0]["permission_group_id"];

                btnAdd.Enabled = false;
                btnRefresh.Enabled = true;
                btnDelete.Enabled = true;
                btnDeleteAll.Enabled = true;
                btnSave.Enabled = true;
            }
        }

        private void Form_Add_Waiter_Load(object sender, EventArgs e)
        {
            this.users = user.get_all_users();

            this.last_id();
            if ( this.user_id != 0 )
            {
                txtID.Text = this.user_id.ToString();
                this.Get(this.user_id);
            } else
            {
                last_id();

                if (user.get_last_id() == "")
                {
                    txtID.Text = "1";
                    btnRight.Enabled = false;
                    btnRight2.Enabled = false;
                    btnLeft.Enabled = false;
                    btnLeft2.Enabled = false;
                } else
                {
                    this.row = Convert.ToInt32(user.get_last_id());
                }
            }
            

        }

        private void textEdit5_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void simpleButton7_Click(object sender, EventArgs e)
        {

        }

        private void textEdit5_EditValueChanged_1(object sender, EventArgs e)
        {

        }

        private void btnRefresh_Click(object sender, EventArgs e)
        {
            last_id();
        }

        private void txtPohne_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void btnAdd_Click(object sender, EventArgs e)
        {
            if (dxValidationProvider1.Validate())
            {
                byte[] bytes;
                MemoryStream stream = new MemoryStream();
                pictureEditWaiter.Image.Save(stream, ImageFormat.Jpeg);
                bytes = stream.ToArray();

                int is_active = isActive.EditValue.ToString() == "Active" ? 1 : 0;
                int is_banned = isBanned.EditValue.ToString() == "Banned" ? 1 : 0;
                
                user.add_user(txtName.Text, txtPhone.Text, txtName.Text, txtEmail.Text, txtPassword.Text, "Delivery", is_active, is_banned, Convert.ToInt32(txtPermissionGroup.EditValue), 0, memoAdress.Text, bytes, Convert.ToInt32(txtBranch.EditValue), DateTime.Now, DateTime.Now);
                
                this.last_id();

                if (this.form_users_list != null)
                    this.form_users_list.asyncData();

                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                    simpleSound.Play();
                }
            }
            else
            {
                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer simpleSound = new SoundPlayer(@"c:\ValidationError.wav");
                    simpleSound.Play();
                }
            }
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            if (dxValidationProvider1.Validate())
            {
                byte[] bytes;
                MemoryStream stream = new MemoryStream();
                pictureEditWaiter.Image.Save(stream, ImageFormat.Jpeg);
                bytes = stream.ToArray();
                int is_active = isActive.EditValue.ToString() == "Active" ? 1 : 0;
                int is_banned = isBanned.EditValue.ToString() == "Banned" ? 1 : 0;

                user.update_user(Convert.ToInt32(txtID.Text), txtName.Text, txtPhone.Text, txtName.Text, txtEmail.Text, txtPassword.Text, "Delivery", is_active, is_banned, Convert.ToInt32(txtPermissionGroup.EditValue), 0, memoAdress.Text, bytes, Convert.ToInt32(txtBranch.EditValue), DateTime.Now);

                if (this.form_users_list != null)
                    this.form_users_list.asyncData();

                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                    simpleSound.Play();
                }
            }
            else
            {
                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer simpleSound = new SoundPlayer(@"c:\ValidationError.wav");
                    simpleSound.Play();
                }
            }
        }

        private void btnDeleteAll_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("êtes-vous sûr ?", "Confirmer", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                user.delete_all();
                this.last_id();
            }
        }

        private void btnDelete_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("êtes-vous sûr ?", "Confirmer", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                user.delete(Convert.ToInt32(txtID.Text));
                this.last_id();
            }
        }

        private void btnRight2_Click(object sender, EventArgs e)
        {
            row = Convert.ToInt32(user.get_last_id()) - 1;
            load();
            btnRight.Enabled = false;
            btnLeft.Enabled = true;
        }

        private void btnRight_Click(object sender, EventArgs e)
        {
            if ((Convert.ToInt32(user.get_last_id())) > row)
            {
                row++;
                load();
                btnLeft.Enabled = true;
            }
            else
            {
                btnRight.Enabled = false;
            }
        }

        private void btnLeft2_Click(object sender, EventArgs e)
        {
            row = 0;
            load();
            btnLeft.Enabled = false;
            btnRight.Enabled = true;
        }

        private void btnLeft_Click(object sender, EventArgs e)
        {
            if (row > 0)
            {
                row--;
                load();
                btnRight.Enabled = true;
            }
            else
            {
                btnLeft.Enabled = false;
            }
        }

        private void searchLookUpClient_EditValueChanged(object sender, EventArgs e)
        {
            object obj = searchLookUpWaiter.EditValue;
            //string text = searchLookUpClient.Text;
            //MessageBox.Show(obj.ToString());
            Get(Convert.ToInt32(obj));
        }

        private void searchLookUpClient_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
        }

        private void searchLookUpClient_ButtonPressed(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            MessageBox.Show(e.ToString());
        }

        private void btnExit_Click(object sender, EventArgs e)
        {
            this.Close();
        }
    }
}