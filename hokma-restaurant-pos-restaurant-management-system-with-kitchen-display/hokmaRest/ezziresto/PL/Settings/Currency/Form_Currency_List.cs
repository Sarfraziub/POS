using DevExpress.Data;
using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Media;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ezziresto.PL.Settings.Currency
{
    public partial class Form_Currency_List : DevExpress.XtraEditors.XtraForm
    {
        BL.Currency.Currency currency = new BL.Currency.Currency();
        int currency_id = 0;
        bool filter = true;

        public Form_Currency_List()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSourceCurrency.FillAsync();
        }

        public void asyncData()
        {
            sqlDataSourceCurrency.FillAsync();
        }

        private void btnAdd_Click(object sender, EventArgs e)
        {
            Form_Add_Currency currency = new Form_Add_Currency();
            currency.setObject(this);
            currency.ShowDialog();
        }

        private void gridViewCurrency_RowClick(object sender, DevExpress.XtraGrid.Views.Grid.RowClickEventArgs e)
        {
            object value = this.gridViewCurrency.GetRowCellValue(this.gridViewCurrency.FocusedRowHandle, "id");
            this.currency_id = Convert.ToInt32(value);
            btnEdit.Enabled = true;
            btnDelete.Enabled = true;
        }

        private void gridControlCurrency_DoubleClick(object sender, EventArgs e)
        {
            object value = this.gridViewCurrency.GetRowCellValue(this.gridViewCurrency.FocusedRowHandle, "id");
            Form_Edit_Currency currency = new Form_Edit_Currency();
            currency.setID(Convert.ToInt32(value));
            currency.setObject(this);
            currency.ShowDialog();
        }

        private void btnEdit_Click(object sender, EventArgs e)
        {
            if (this.currency_id != 0)
            {
                Form_Edit_Currency currency = new Form_Edit_Currency();
                currency.setID(this.currency_id);
                currency.setObject(this);
                currency.ShowDialog();
            }
        }

        private void Form_Currency_List_Load(object sender, EventArgs e)
        {
            btnEdit.Enabled = false;
            btnDelete.Enabled = false;
        }

        private void btnDelete_Click(object sender, EventArgs e)
        {
            if (this.currency_id != 0)
            {
                DialogResult dialogResult = MessageBox.Show("Are You Sure,You Whant Delete This Item ?", "Delete This Item", MessageBoxButtons.YesNo);
                if (dialogResult == DialogResult.Yes)
                {
                    currency.delete(this.currency_id);
                    this.asyncData();
                    btnEdit.Enabled = false;
                    btnDelete.Enabled = false;
                    if (Properties.Settings.Default.sound == "yes")
                    {
                        SoundPlayer simpleSound = new SoundPlayer(@"c:\Deleted.wav");
                        simpleSound.Play();
                    }
                }
                else if (dialogResult == DialogResult.No)
                {
                    // do something
                }
            }
        }

        private void textPeriodeDate_EditValueChanged(object sender, EventArgs e)
        {
            if (textPeriodeDate.EditValue.ToString() == "All")
            {
                gridViewCurrency.ActiveFilterString = null;
            }
            else if (textPeriodeDate.EditValue.ToString() == "To Day")
            {
                gridViewCurrency.ActiveFilterString = string.Format("IsOutlookIntervalToday([created_at])");
            }
            else if (textPeriodeDate.EditValue.ToString() == "This Week")
            {
                gridViewCurrency.ActiveFilterString = string.Format("IsThisWeek([created_at])");
            }
            else if (textPeriodeDate.EditValue.ToString() == "Last Week")
            {
                gridViewCurrency.ActiveFilterString = string.Format("IsOutlookIntervalLastWeek([created_at])");
            }
            else if (textPeriodeDate.EditValue.ToString() == "Newest")
            {
                gridViewCurrency.Columns["id"].SortOrder = ColumnSortOrder.Ascending;
            }
            else if (textPeriodeDate.EditValue.ToString() == "Oldest")
            {
                gridViewCurrency.Columns["id"].SortOrder = ColumnSortOrder.Descending;
            }
            else if (textPeriodeDate.EditValue.ToString() == "Between the dates")
            {
                startDate.Enabled = true;
                endDate.Enabled = true;
                gridViewCurrency.ActiveFilterString = string.Format("[created_at] Between(#" + startDate.DateTime + "#, #" + endDate.DateTime + "#)");
            }
        }

        private void btnReset_Click(object sender, EventArgs e)
        {
            this.filter = false;
            gridViewCurrency.ClearSorting();
            gridViewCurrency.ApplyFindFilter(string.Empty);
            textPeriodeDate.EditValue = "";
            startDate.Text = DateTime.Now.ToString();
            endDate.Text = DateTime.Now.ToString();
            if (Properties.Settings.Default.sound == "yes")
            {
                SoundPlayer simpleSound = new SoundPlayer(@"c:\Wrong.wav");
                simpleSound.Play();
            }
        }

        private void startDate_EditValueChanged(object sender, EventArgs e)
        {
            if (endDate.EditValue != null & this.filter)
                gridViewCurrency.ActiveFilterString = string.Format("[created_at] Between(#" + startDate.DateTime + "#, #" + endDate.DateTime + "#)");
        }

        private void endDate_EditValueChanged(object sender, EventArgs e)
        {
            if (startDate.EditValue != null & this.filter)
                gridViewCurrency.ActiveFilterString = string.Format("[created_at] Between(#" + startDate.DateTime + "#, #" + endDate.DateTime + "#)");
        }

        private void repositoryItemButtonSetDefaultCurrency_Click(object sender, EventArgs e)
        {
            DialogResult dialogResult = MessageBox.Show("Are You Sure,You Whant to set as default currency ?", "Set as default currency", MessageBoxButtons.YesNo);
            if (dialogResult == DialogResult.Yes)
            {
                object id = this.gridViewCurrency.GetRowCellValue(this.gridViewCurrency.FocusedRowHandle, "id");
                object symbol = this.gridViewCurrency.GetRowCellValue(this.gridViewCurrency.FocusedRowHandle, "symbol");
                currency.default_currency(Convert.ToInt32(id), 1, DateTime.Now);
                Properties.Settings.Default.currency = symbol.ToString();
                if (Properties.Settings.Default.sound == "yes")
                {
                    SoundPlayer simpleSound = new SoundPlayer(@"c:\Added.wav");
                    simpleSound.Play();
                }
            }
            else if (dialogResult == DialogResult.No)
            {
                // do something
            }
        }
    }
}